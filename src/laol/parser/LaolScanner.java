/* The following code was generated by JFlex 1.6.1 */

package laol.parser;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.HashMap;
import apfe.runtime.Token;
import apfe.runtime.Scanner;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>laol.flex</tt>
 */
public class LaolScanner extends Scanner implements ITokenCodes {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\2\1\15\1\16\1\1\22\0\1\3\1\76\1\113"+
    "\2\0\1\112\1\101\1\14\1\106\1\107\1\5\1\20\1\72\1\103"+
    "\1\71\1\4\1\10\1\22\2\114\4\12\2\7\1\67\1\70\1\73"+
    "\1\74\1\75\1\21\1\0\1\64\1\25\1\11\1\24\1\17\1\60"+
    "\1\66\1\27\1\61\2\6\1\62\2\6\1\26\2\6\1\65\1\23"+
    "\1\63\6\6\1\110\1\30\1\111\1\100\1\13\1\0\1\31\1\32"+
    "\1\36\1\44\1\41\1\45\1\6\1\43\1\40\1\6\1\42\1\37"+
    "\1\52\1\47\1\51\1\53\1\57\1\35\1\33\1\34\1\54\1\56"+
    "\1\55\1\46\1\50\1\6\1\104\1\102\1\105\1\77\6\0\1\15"+
    "\u1fa2\0\1\15\1\15\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\2\2\1\3\1\4\1\5\1\6\2\7"+
    "\1\6\1\1\1\10\1\11\20\6\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\2\40\1\1\1\41\1\42\1\0"+
    "\1\43\1\44\3\0\1\6\5\0\1\45\1\46\12\6"+
    "\1\47\1\50\20\6\1\51\1\52\1\53\1\54\1\55"+
    "\1\56\1\57\1\60\1\61\1\62\1\63\1\64\1\65"+
    "\1\66\1\67\1\70\1\71\2\72\1\73\1\74\1\75"+
    "\1\76\1\77\1\71\1\100\1\101\1\102\2\42\10\0"+
    "\2\6\4\103\5\6\1\104\13\6\1\105\2\6\1\106"+
    "\1\107\1\6\1\110\11\6\1\111\1\112\1\113\1\114"+
    "\1\72\1\115\1\0\7\6\1\116\1\6\1\117\2\6"+
    "\1\120\4\6\1\121\3\6\1\122\10\6\1\123\1\115"+
    "\1\124\3\6\1\125\1\126\1\6\1\127\1\130\2\6"+
    "\1\131\1\132\1\6\1\133\1\6\1\134\1\6\1\135"+
    "\4\6\1\136\1\6\1\137\1\0\3\6\1\140\1\141"+
    "\4\6\1\142\2\6\1\143\1\144\1\124\1\0\3\6"+
    "\1\145\1\6\1\146\1\147\1\150\1\6\1\151\1\6"+
    "\1\152\4\6\1\153\1\154\1\155";

  private static int [] zzUnpackAction() {
    int [] result = new int[278];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\115\0\232\0\347\0\232\0\u0134\0\u0181\0\u01ce"+
    "\0\u021b\0\u0268\0\u02b5\0\u0302\0\u034f\0\u039c\0\232\0\u03e9"+
    "\0\u0436\0\u0483\0\u04d0\0\u051d\0\u056a\0\u05b7\0\u0604\0\u0651"+
    "\0\u069e\0\u06eb\0\u0738\0\u0785\0\u07d2\0\u081f\0\u086c\0\u08b9"+
    "\0\232\0\u0906\0\232\0\u0953\0\u09a0\0\u09ed\0\u0a3a\0\232"+
    "\0\232\0\u0a87\0\u0ad4\0\u0b21\0\232\0\232\0\232\0\232"+
    "\0\232\0\232\0\u0b6e\0\232\0\u0bbb\0\u0c08\0\232\0\u0c55"+
    "\0\232\0\u0ca2\0\u0cef\0\232\0\232\0\u0d3c\0\u0d89\0\u0dd6"+
    "\0\u0e23\0\u0e70\0\u0ebd\0\u0f0a\0\u0f57\0\u0fa4\0\232\0\232"+
    "\0\u0ff1\0\u103e\0\u108b\0\u10d8\0\u1125\0\u1172\0\u11bf\0\u120c"+
    "\0\u1259\0\u12a6\0\u021b\0\u021b\0\u12f3\0\u1340\0\u138d\0\u13da"+
    "\0\u1427\0\u1474\0\u14c1\0\u150e\0\u155b\0\u15a8\0\u15f5\0\u1642"+
    "\0\u168f\0\u16dc\0\u1729\0\u1776\0\232\0\232\0\u17c3\0\232"+
    "\0\232\0\232\0\u1810\0\232\0\232\0\232\0\232\0\232"+
    "\0\232\0\232\0\232\0\232\0\232\0\u185d\0\u18aa\0\232"+
    "\0\232\0\232\0\232\0\232\0\u18f7\0\232\0\232\0\232"+
    "\0\u1944\0\232\0\u1991\0\u034f\0\u19de\0\u1a2b\0\u1a78\0\u1ac5"+
    "\0\u1b12\0\u1b5f\0\u1bac\0\u1bf9\0\u1c46\0\u1c93\0\u1ce0\0\u1d2d"+
    "\0\u1d7a\0\u1dc7\0\u1e14\0\u1e61\0\u1eae\0\u021b\0\u1efb\0\u1f48"+
    "\0\u1f95\0\u1fe2\0\u202f\0\u207c\0\u20c9\0\u2116\0\u2163\0\u21b0"+
    "\0\u21fd\0\u021b\0\u224a\0\u2297\0\u021b\0\u021b\0\u22e4\0\u021b"+
    "\0\u2331\0\u237e\0\u23cb\0\u2418\0\u2465\0\u24b2\0\u24ff\0\u254c"+
    "\0\u2599\0\u021b\0\u021b\0\232\0\232\0\232\0\u25e6\0\u2633"+
    "\0\u2680\0\u26cd\0\u271a\0\u2767\0\u27b4\0\u2801\0\u284e\0\u021b"+
    "\0\u289b\0\u021b\0\u28e8\0\u2935\0\u021b\0\u2982\0\u29cf\0\u2a1c"+
    "\0\u2a69\0\u021b\0\u2ab6\0\u2b03\0\u2b50\0\u021b\0\u2b9d\0\u2bea"+
    "\0\u2c37\0\u2c84\0\u2cd1\0\u2d1e\0\u2d6b\0\u2db8\0\u021b\0\232"+
    "\0\u2e05\0\u2e52\0\u2e9f\0\u2eec\0\u021b\0\u021b\0\u2f39\0\u021b"+
    "\0\u021b\0\u2f86\0\u2fd3\0\u021b\0\u021b\0\u3020\0\u021b\0\u306d"+
    "\0\u021b\0\u30ba\0\u021b\0\u3107\0\u3154\0\u31a1\0\u31ee\0\u021b"+
    "\0\u323b\0\u021b\0\u3288\0\u32d5\0\u3322\0\u336f\0\u021b\0\u021b"+
    "\0\u33bc\0\u3409\0\u3456\0\u34a3\0\u021b\0\u34f0\0\u353d\0\u021b"+
    "\0\u021b\0\u358a\0\u35d7\0\u3624\0\u3671\0\u36be\0\u021b\0\u370b"+
    "\0\u021b\0\u021b\0\u021b\0\u3758\0\u021b\0\u37a5\0\u021b\0\u37f2"+
    "\0\u383f\0\u388c\0\u38d9\0\u021b\0\u021b\0\u021b";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[278];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12"+
    "\1\13\1\11\1\12\1\14\1\15\1\3\1\6\1\11"+
    "\1\16\1\17\1\12\5\11\1\3\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\11\1\26\1\27\2\11\1\30"+
    "\1\31\1\11\1\32\2\11\1\33\1\34\1\35\1\36"+
    "\1\37\10\11\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55"+
    "\1\56\1\57\1\60\1\61\1\62\1\63\1\64\1\12"+
    "\1\65\1\66\1\67\25\65\1\70\62\65\1\71\1\65"+
    "\117\0\1\5\115\0\1\6\12\0\1\6\102\0\1\72"+
    "\1\73\66\0\1\74\114\0\1\75\26\0\6\11\3\0"+
    "\1\11\2\0\6\11\1\0\36\11\25\0\1\11\3\0"+
    "\1\76\3\0\2\12\1\0\2\12\1\77\1\0\1\76"+
    "\3\0\1\12\71\0\1\12\7\0\2\13\1\0\2\13"+
    "\1\100\5\0\1\13\71\0\1\13\6\0\5\11\1\101"+
    "\3\0\1\11\2\0\6\11\1\0\36\11\25\0\1\11"+
    "\23\0\1\102\1\103\1\104\1\105\1\106\2\0\1\104"+
    "\1\102\7\0\1\106\1\103\4\0\1\105\63\0\1\107"+
    "\53\0\1\110\26\0\6\11\3\0\1\11\2\0\6\11"+
    "\1\0\1\11\1\111\4\11\1\112\27\11\25\0\1\11"+
    "\6\0\6\11\3\0\1\11\2\0\6\11\1\0\4\11"+
    "\1\113\31\11\25\0\1\11\6\0\6\11\3\0\1\11"+
    "\2\0\6\11\1\0\3\11\1\114\17\11\1\115\12\11"+
    "\25\0\1\11\6\0\6\11\3\0\1\11\2\0\6\11"+
    "\1\0\4\11\1\116\5\11\1\117\23\11\25\0\1\11"+
    "\6\0\6\11\3\0\1\11\2\0\6\11\1\0\10\11"+
    "\1\120\25\11\25\0\1\11\6\0\6\11\3\0\1\11"+
    "\2\0\6\11\1\0\1\121\5\11\1\122\27\11\25\0"+
    "\1\11\6\0\6\11\3\0\1\11\2\0\6\11\1\0"+
    "\14\11\1\123\1\11\1\124\2\11\1\125\14\11\25\0"+
    "\1\11\6\0\6\11\3\0\1\11\2\0\6\11\1\0"+
    "\6\11\1\126\6\11\1\127\20\11\25\0\1\11\6\0"+
    "\6\11\3\0\1\11\2\0\6\11\1\0\10\11\1\130"+
    "\25\11\25\0\1\11\6\0\6\11\3\0\1\11\2\0"+
    "\6\11\1\0\1\131\6\11\1\132\10\11\1\133\15\11"+
    "\25\0\1\11\6\0\6\11\3\0\1\11\2\0\6\11"+
    "\1\0\7\11\1\134\1\135\25\11\25\0\1\11\6\0"+
    "\6\11\3\0\1\11\2\0\6\11\1\0\7\11\1\136"+
    "\10\11\1\137\15\11\25\0\1\11\6\0\6\11\3\0"+
    "\1\11\2\0\6\11\1\0\4\11\1\140\16\11\1\141"+
    "\12\11\25\0\1\11\6\0\6\11\3\0\1\11\2\0"+
    "\6\11\1\0\16\11\1\142\17\11\25\0\1\11\6\0"+
    "\6\11\3\0\1\11\2\0\6\11\1\0\12\11\1\143"+
    "\23\11\25\0\1\11\6\0\6\11\3\0\1\11\2\0"+
    "\6\11\1\0\1\144\35\11\25\0\1\11\67\0\1\145"+
    "\116\0\1\146\116\0\1\147\1\150\114\0\1\151\114\0"+
    "\1\152\1\153\113\0\1\154\114\0\1\155\4\0\1\156"+
    "\107\0\1\157\5\0\1\160\106\0\1\161\1\162\5\0"+
    "\1\163\105\0\1\164\20\0\1\65\2\0\25\65\1\0"+
    "\62\65\1\0\1\65\2\0\1\67\112\0\1\165\2\0"+
    "\5\165\1\166\1\165\1\167\1\165\1\170\2\0\3\165"+
    "\1\166\5\165\1\171\1\165\1\172\1\165\1\173\1\174"+
    "\5\165\1\175\1\165\1\176\1\165\1\177\43\165\1\200"+
    "\1\166\1\72\1\201\1\202\112\72\5\73\1\203\107\73"+
    "\3\0\1\76\10\0\1\204\1\0\1\76\76\0\1\205"+
    "\2\0\12\205\2\0\4\205\1\206\1\207\1\210\1\211"+
    "\1\212\2\205\1\210\1\206\7\205\1\212\1\207\4\205"+
    "\1\211\44\205\2\0\12\205\2\0\76\205\6\0\6\11"+
    "\3\0\1\11\2\0\6\11\1\0\27\11\1\213\2\11"+
    "\1\214\3\11\25\0\1\11\24\0\1\103\1\104\1\105"+
    "\1\106\2\0\1\104\10\0\1\106\1\103\4\0\1\105"+
    "\46\0\1\103\3\0\2\215\1\0\1\215\3\0\1\103"+
    "\3\0\1\215\71\0\1\215\3\0\1\104\4\0\1\216"+
    "\5\0\1\104\2\0\2\216\75\0\1\105\4\0\1\217"+
    "\1\0\1\217\3\0\1\105\2\0\2\217\71\0\1\217"+
    "\3\0\1\106\3\0\4\220\3\0\1\106\1\220\2\0"+
    "\1\220\1\0\2\220\3\0\2\220\3\0\1\220\2\0"+
    "\1\220\2\0\2\220\12\0\1\220\3\0\1\220\27\0"+
    "\1\220\6\0\6\11\3\0\1\11\2\0\6\11\1\0"+
    "\2\11\1\221\33\11\25\0\1\11\6\0\6\11\3\0"+
    "\1\11\2\0\6\11\1\0\7\11\1\222\26\11\25\0"+
    "\1\11\6\0\6\11\3\0\1\11\2\0\6\11\1\0"+
    "\10\11\1\223\25\11\25\0\1\11\6\0\6\11\3\0"+
    "\1\11\2\0\6\11\1\0\1\224\35\11\25\0\1\11"+
    "\6\0\6\11\3\0\1\11\2\0\6\11\1\0\22\11"+
    "\1\225\13\11\25\0\1\11\6\0\6\11\3\0\1\11"+
    "\2\0\6\11\1\0\17\11\1\226\3\11\1\227\12\11"+
    "\25\0\1\11\6\0\6\11\3\0\1\11\2\0\6\11"+
    "\1\0\4\11\1\230\2\11\1\231\26\11\25\0\1\11"+
    "\6\0\6\11\3\0\1\11\2\0\6\11\1\0\3\11"+
    "\1\232\22\11\1\233\7\11\25\0\1\11\6\0\6\11"+
    "\3\0\1\11\2\0\6\11\1\0\2\11\1\234\1\235"+
    "\32\11\25\0\1\11\6\0\6\11\3\0\1\11\2\0"+
    "\6\11\1\0\1\236\35\11\25\0\1\11\6\0\6\11"+
    "\3\0\1\11\2\0\6\11\1\0\22\11\1\237\13\11"+
    "\25\0\1\11\6\0\6\11\3\0\1\11\2\0\6\11"+
    "\1\0\2\11\1\240\33\11\25\0\1\11\6\0\6\11"+
    "\3\0\1\11\2\0\6\11\1\0\3\11\1\241\32\11"+
    "\25\0\1\11\6\0\6\11\3\0\1\11\2\0\6\11"+
    "\1\0\14\11\1\242\21\11\25\0\1\11\6\0\6\11"+
    "\3\0\1\11\2\0\6\11\1\0\6\11\1\243\27\11"+
    "\25\0\1\11\6\0\6\11\3\0\1\11\2\0\6\11"+
    "\1\0\16\11\1\244\17\11\25\0\1\11\6\0\6\11"+
    "\3\0\1\11\2\0\6\11\1\0\4\11\1\245\31\11"+
    "\25\0\1\11\6\0\6\11\3\0\1\11\2\0\6\11"+
    "\1\0\6\11\1\246\27\11\25\0\1\11\6\0\6\11"+
    "\3\0\1\11\2\0\6\11\1\0\15\11\1\247\6\11"+
    "\1\250\11\11\25\0\1\11\6\0\6\11\3\0\1\11"+
    "\2\0\6\11\1\0\15\11\1\251\20\11\25\0\1\11"+
    "\6\0\6\11\3\0\1\11\2\0\6\11\1\0\13\11"+
    "\1\252\22\11\25\0\1\11\6\0\6\11\3\0\1\11"+
    "\2\0\6\11\1\0\7\11\1\253\10\11\1\254\15\11"+
    "\25\0\1\11\6\0\6\11\3\0\1\11\2\0\6\11"+
    "\1\0\1\11\1\255\34\11\25\0\1\11\6\0\6\11"+
    "\3\0\1\11\2\0\6\11\1\0\3\11\1\256\2\11"+
    "\1\257\27\11\25\0\1\11\6\0\6\11\3\0\1\11"+
    "\2\0\6\11\1\0\7\11\1\260\1\261\25\11\25\0"+
    "\1\11\6\0\6\11\3\0\1\11\2\0\6\11\1\0"+
    "\4\11\1\262\1\11\1\263\27\11\25\0\1\11\74\0"+
    "\1\264\114\0\1\265\30\0\1\167\1\0\1\167\7\0"+
    "\1\167\71\0\1\167\10\0\1\266\1\0\1\266\7\0"+
    "\1\266\71\0\1\266\7\0\4\267\4\0\1\267\2\0"+
    "\1\267\1\0\2\267\3\0\2\267\3\0\1\267\2\0"+
    "\1\267\2\0\2\267\12\0\1\267\3\0\1\267\27\0"+
    "\1\267\2\0\1\202\112\0\4\73\1\202\1\203\107\73"+
    "\14\0\1\270\114\0\1\270\7\0\1\103\1\104\1\105"+
    "\1\106\2\0\1\104\10\0\1\106\1\103\4\0\1\105"+
    "\46\0\1\103\3\0\2\215\1\0\1\215\1\0\1\270"+
    "\1\0\1\103\3\0\1\215\71\0\1\215\3\0\1\104"+
    "\4\0\1\216\3\0\1\270\1\0\1\104\2\0\2\216"+
    "\75\0\1\105\4\0\1\217\1\0\1\217\1\0\1\270"+
    "\1\0\1\105\2\0\2\217\71\0\1\217\3\0\1\106"+
    "\3\0\4\220\1\0\1\270\1\0\1\106\1\220\2\0"+
    "\1\220\1\0\2\220\3\0\2\220\3\0\1\220\2\0"+
    "\1\220\2\0\2\220\12\0\1\220\3\0\1\220\27\0"+
    "\1\220\6\0\6\11\3\0\1\11\2\0\6\11\1\0"+
    "\30\11\1\271\5\11\25\0\1\11\6\0\6\11\3\0"+
    "\1\11\2\0\6\11\1\0\33\11\1\272\2\11\25\0"+
    "\1\11\7\0\2\215\1\0\2\215\6\0\1\215\71\0"+
    "\1\215\10\0\1\216\2\0\1\216\6\0\1\216\102\0"+
    "\1\217\1\0\2\217\6\0\1\217\71\0\1\217\7\0"+
    "\5\220\3\0\1\220\2\0\1\220\1\0\2\220\3\0"+
    "\2\220\3\0\1\220\2\0\1\220\2\0\2\220\12\0"+
    "\1\220\3\0\1\220\27\0\1\220\6\0\6\11\3\0"+
    "\1\11\2\0\6\11\1\0\3\11\1\273\32\11\25\0"+
    "\1\11\6\0\6\11\3\0\1\11\2\0\6\11\1\0"+
    "\1\274\35\11\25\0\1\11\6\0\6\11\3\0\1\11"+
    "\2\0\6\11\1\0\1\275\35\11\25\0\1\11\6\0"+
    "\6\11\3\0\1\11\2\0\6\11\1\0\3\11\1\276"+
    "\32\11\25\0\1\11\6\0\6\11\3\0\1\11\2\0"+
    "\6\11\1\0\10\11\1\277\25\11\25\0\1\11\6\0"+
    "\6\11\3\0\1\11\2\0\6\11\1\0\10\11\1\300"+
    "\25\11\25\0\1\11\6\0\6\11\3\0\1\11\2\0"+
    "\6\11\1\0\20\11\1\301\15\11\25\0\1\11\6\0"+
    "\6\11\3\0\1\11\2\0\6\11\1\0\2\11\1\302"+
    "\33\11\25\0\1\11\6\0\6\11\3\0\1\11\2\0"+
    "\6\11\1\0\23\11\1\303\12\11\25\0\1\11\6\0"+
    "\6\11\3\0\1\11\2\0\6\11\1\0\23\11\1\304"+
    "\12\11\25\0\1\11\6\0\6\11\3\0\1\11\2\0"+
    "\6\11\1\0\10\11\1\305\25\11\25\0\1\11\6\0"+
    "\6\11\3\0\1\11\2\0\6\11\1\0\5\11\1\306"+
    "\30\11\25\0\1\11\6\0\6\11\3\0\1\11\2\0"+
    "\6\11\1\0\2\11\1\307\33\11\25\0\1\11\6\0"+
    "\6\11\3\0\1\11\2\0\6\11\1\0\6\11\1\310"+
    "\27\11\25\0\1\11\6\0\6\11\3\0\1\11\2\0"+
    "\6\11\1\0\7\11\1\311\1\312\25\11\25\0\1\11"+
    "\6\0\6\11\3\0\1\11\2\0\6\11\1\0\10\11"+
    "\1\313\25\11\25\0\1\11\6\0\6\11\3\0\1\11"+
    "\2\0\6\11\1\0\2\11\1\314\33\11\25\0\1\11"+
    "\6\0\6\11\3\0\1\11\2\0\6\11\1\0\1\315"+
    "\35\11\25\0\1\11\6\0\6\11\3\0\1\11\2\0"+
    "\6\11\1\0\3\11\1\316\32\11\25\0\1\11\6\0"+
    "\6\11\3\0\1\11\2\0\6\11\1\0\7\11\1\317"+
    "\26\11\25\0\1\11\6\0\6\11\3\0\1\11\2\0"+
    "\6\11\1\0\23\11\1\320\12\11\25\0\1\11\6\0"+
    "\6\11\3\0\1\11\2\0\6\11\1\0\25\11\1\321"+
    "\10\11\25\0\1\11\6\0\6\11\3\0\1\11\2\0"+
    "\6\11\1\0\3\11\1\322\32\11\25\0\1\11\6\0"+
    "\6\11\3\0\1\11\2\0\6\11\1\0\6\11\1\323"+
    "\27\11\25\0\1\11\6\0\6\11\3\0\1\11\2\0"+
    "\6\11\1\0\7\11\1\324\26\11\25\0\1\11\6\0"+
    "\6\11\3\0\1\11\2\0\6\11\1\0\10\11\1\325"+
    "\25\11\25\0\1\11\6\0\6\11\3\0\1\11\2\0"+
    "\6\11\1\0\6\11\1\326\27\11\25\0\1\11\6\0"+
    "\6\11\3\0\1\11\2\0\6\11\1\0\16\11\1\327"+
    "\17\11\25\0\1\11\7\0\4\330\4\0\1\330\2\0"+
    "\1\330\1\0\2\330\3\0\2\330\3\0\1\330\2\0"+
    "\1\330\2\0\2\330\12\0\1\330\3\0\1\330\27\0"+
    "\1\330\7\0\2\331\1\0\1\331\7\0\1\331\71\0"+
    "\1\331\6\0\6\11\3\0\1\11\2\0\6\11\1\0"+
    "\31\11\1\332\4\11\25\0\1\11\6\0\6\11\3\0"+
    "\1\11\2\0\6\11\1\0\34\11\1\333\1\11\25\0"+
    "\1\11\6\0\6\11\3\0\1\11\2\0\6\11\1\0"+
    "\4\11\1\334\31\11\25\0\1\11\6\0\6\11\3\0"+
    "\1\11\2\0\6\11\1\0\2\11\1\335\33\11\25\0"+
    "\1\11\6\0\6\11\3\0\1\11\2\0\6\11\1\0"+
    "\11\11\1\336\24\11\25\0\1\11\6\0\6\11\3\0"+
    "\1\11\2\0\6\11\1\0\7\11\1\337\26\11\25\0"+
    "\1\11\6\0\6\11\3\0\1\11\2\0\6\11\1\0"+
    "\4\11\1\340\31\11\25\0\1\11\6\0\6\11\3\0"+
    "\1\11\2\0\6\11\1\0\24\11\1\341\11\11\25\0"+
    "\1\11\6\0\6\11\3\0\1\11\2\0\6\11\1\0"+
    "\4\11\1\342\31\11\25\0\1\11\6\0\6\11\3\0"+
    "\1\11\2\0\6\11\1\0\7\11\1\343\26\11\25\0"+
    "\1\11\6\0\6\11\3\0\1\11\2\0\6\11\1\0"+
    "\12\11\1\344\23\11\25\0\1\11\6\0\6\11\3\0"+
    "\1\11\2\0\6\11\1\0\2\11\1\345\33\11\25\0"+
    "\1\11\6\0\6\11\3\0\1\11\2\0\6\11\1\0"+
    "\10\11\1\346\25\11\25\0\1\11\6\0\6\11\3\0"+
    "\1\11\2\0\6\11\1\0\14\11\1\347\21\11\25\0"+
    "\1\11\6\0\6\11\3\0\1\11\2\0\6\11\1\0"+
    "\16\11\1\350\17\11\25\0\1\11\6\0\6\11\3\0"+
    "\1\11\2\0\6\11\1\0\10\11\1\351\25\11\25\0"+
    "\1\11\6\0\6\11\3\0\1\11\2\0\6\11\1\0"+
    "\6\11\1\352\27\11\25\0\1\11\6\0\6\11\3\0"+
    "\1\11\2\0\6\11\1\0\16\11\1\353\17\11\25\0"+
    "\1\11\6\0\6\11\3\0\1\11\2\0\6\11\1\0"+
    "\6\11\1\354\27\11\25\0\1\11\6\0\6\11\3\0"+
    "\1\11\2\0\6\11\1\0\1\355\35\11\25\0\1\11"+
    "\6\0\6\11\3\0\1\11\2\0\6\11\1\0\10\11"+
    "\1\356\25\11\25\0\1\11\6\0\6\11\3\0\1\11"+
    "\2\0\6\11\1\0\7\11\1\357\26\11\25\0\1\11"+
    "\6\0\6\11\3\0\1\11\2\0\6\11\1\0\6\11"+
    "\1\360\27\11\25\0\1\11\6\0\6\11\3\0\1\11"+
    "\2\0\6\11\1\0\2\11\1\361\33\11\25\0\1\11"+
    "\6\0\6\11\3\0\1\11\2\0\6\11\1\0\10\11"+
    "\1\362\25\11\25\0\1\11\7\0\2\331\1\0\2\331"+
    "\3\0\1\363\2\0\1\331\16\0\1\363\52\0\1\331"+
    "\6\0\6\11\3\0\1\364\2\0\6\11\1\0\36\11"+
    "\25\0\1\11\6\0\6\11\3\0\1\11\2\0\6\11"+
    "\1\0\35\11\1\365\25\0\1\11\6\0\6\11\3\0"+
    "\1\11\2\0\6\11\1\0\1\366\35\11\25\0\1\11"+
    "\6\0\6\11\3\0\1\11\2\0\6\11\1\0\5\11"+
    "\1\367\30\11\25\0\1\11\6\0\6\11\3\0\1\11"+
    "\2\0\6\11\1\0\16\11\1\370\17\11\25\0\1\11"+
    "\6\0\6\11\3\0\1\11\2\0\6\11\1\0\4\11"+
    "\1\371\31\11\25\0\1\11\6\0\6\11\3\0\1\11"+
    "\2\0\6\11\1\0\21\11\1\372\14\11\25\0\1\11"+
    "\6\0\6\11\3\0\1\11\2\0\6\11\1\0\13\11"+
    "\1\373\22\11\25\0\1\11\6\0\6\11\3\0\1\11"+
    "\2\0\6\11\1\0\6\11\1\374\27\11\25\0\1\11"+
    "\6\0\6\11\3\0\1\11\2\0\6\11\1\0\10\11"+
    "\1\375\25\11\25\0\1\11\6\0\6\11\3\0\1\11"+
    "\2\0\6\11\1\0\3\11\1\376\32\11\25\0\1\11"+
    "\6\0\6\11\3\0\1\11\2\0\6\11\1\0\5\11"+
    "\1\377\30\11\25\0\1\11\6\0\6\11\3\0\1\11"+
    "\2\0\6\11\1\0\5\11\1\u0100\30\11\25\0\1\11"+
    "\6\0\6\11\3\0\1\11\2\0\6\11\1\0\2\11"+
    "\1\u0101\33\11\25\0\1\11\7\0\2\u0102\1\0\1\u0102"+
    "\5\0\1\u0103\1\0\1\u0102\60\0\1\u0103\10\0\1\u0102"+
    "\6\0\5\11\1\u0104\3\0\1\11\2\0\6\11\1\0"+
    "\36\11\25\0\1\11\6\0\6\11\3\0\1\u0105\2\0"+
    "\6\11\1\0\36\11\25\0\1\11\6\0\6\11\3\0"+
    "\1\11\2\0\6\11\1\0\5\11\1\u0106\30\11\25\0"+
    "\1\11\6\0\6\11\3\0\1\11\2\0\6\11\1\0"+
    "\10\11\1\u0107\25\11\25\0\1\11\6\0\6\11\3\0"+
    "\1\11\2\0\6\11\1\0\10\11\1\u0108\25\11\25\0"+
    "\1\11\6\0\6\11\3\0\1\11\2\0\6\11\1\0"+
    "\2\11\1\u0109\33\11\25\0\1\11\6\0\6\11\3\0"+
    "\1\11\2\0\6\11\1\0\17\11\1\u010a\16\11\25\0"+
    "\1\11\6\0\6\11\3\0\1\11\2\0\6\11\1\0"+
    "\10\11\1\u010b\25\11\25\0\1\11\6\0\6\11\3\0"+
    "\1\11\2\0\6\11\1\0\3\11\1\u010c\32\11\25\0"+
    "\1\11\7\0\2\u0102\1\0\2\u0102\6\0\1\u0102\71\0"+
    "\1\u0102\7\0\2\u0102\1\0\1\u0102\7\0\1\u0102\71\0"+
    "\1\u0102\6\0\5\11\1\u010d\3\0\1\11\2\0\6\11"+
    "\1\0\36\11\25\0\1\11\6\0\6\11\3\0\1\11"+
    "\2\0\6\11\1\0\32\11\1\u010e\3\11\25\0\1\11"+
    "\6\0\6\11\3\0\1\11\2\0\6\11\1\0\3\11"+
    "\1\u010f\32\11\25\0\1\11\6\0\6\11\3\0\1\11"+
    "\2\0\6\11\1\0\16\11\1\u0110\17\11\25\0\1\11"+
    "\6\0\6\11\3\0\1\11\2\0\6\11\1\0\10\11"+
    "\1\u0111\25\11\25\0\1\11\6\0\5\11\1\u0112\3\0"+
    "\1\11\2\0\6\11\1\0\36\11\25\0\1\11\6\0"+
    "\6\11\3\0\1\11\2\0\6\11\1\0\3\11\1\u0113"+
    "\32\11\25\0\1\11\6\0\6\11\3\0\1\11\2\0"+
    "\6\11\1\0\13\11\1\u0114\22\11\25\0\1\11\6\0"+
    "\5\11\1\u0115\3\0\1\11\2\0\6\11\1\0\36\11"+
    "\25\0\1\11\6\0\6\11\3\0\1\11\2\0\6\11"+
    "\1\0\2\11\1\u0116\33\11\25\0\1\11";

  private static int [] zzUnpackTrans() {
    int [] result = new int[14630];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\1\1\1\11\11\1\1\11\21\1\1\11"+
    "\1\1\1\11\4\1\2\11\3\1\6\11\1\1\1\11"+
    "\2\1\1\11\1\1\1\11\1\1\1\0\2\11\3\0"+
    "\1\1\5\0\2\11\34\1\2\11\1\1\3\11\1\1"+
    "\12\11\2\1\5\11\1\1\3\11\1\1\1\11\10\0"+
    "\51\1\3\11\1\1\1\0\37\1\1\11\32\1\1\0"+
    "\17\1\1\0\23\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[278];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
  private final StringBuilder string = new StringBuilder();

  private static String stFileName = null;

  public static void setFileName(String fn) {
    stFileName = fn;
  }

  public static String getFileName() {
    return stFileName;
  }

  private Token create(int id, String text) {
  	return new Token(stFileName, yyline+1, yycolumn+1, text, id);
  }

  private Token create(int id) {
  	return create(id, yytext());
  }

  public LaolScanner(String fn) throws FileNotFoundException {
    this(new FileReader(fn));
    setFileName(fn);
  }

  //TODO: derive from RuntimeException to pass back to parser
  private void error(String msg) {
      StringBuilder sb = new StringBuilder("Error: ");
      sb.append(getFileName()).append(':').append(yyline+1).append(':')
              .append(yycolumn+1).append(": ").append(msg)
              .append(": ").append(yytext());
      throw new RuntimeException(sb.toString());
  }

    @Override
    public Token nextToken() {
        try {
            return xnextToken();
        } catch (IOException ex) {
            throw new RuntimeException(ex);
        }
    }

  @Override  
  public boolean isEOF() {
    return zzAtEOF;
    }

	@Override
	public String getAsString(int tokCode) {
		return stMap.get(tokCode);
	}

	private static final HashMap<Integer,String> stMap = new HashMap<>();
	static {
		stMap.put(COMMENT,"<COMMENT>");
		stMap.put(STRING_LITERAL,"<STRING>");
		//contents of map
		stMap.put(K_ABSTRACT,"abstract");
		stMap.put(K_ALIAS,"alias");
		stMap.put(K_BREAK,"break");
		stMap.put(K_CASE,"case");
		stMap.put(K_CATCH,"catch");
		stMap.put(K_CLASS,"class");
		stMap.put(K_DEF,"def");
		stMap.put(K_ELSE,"else");
		stMap.put(K_ELSIF,"elsif");
		stMap.put(K_EXTENDS,"extends");
		stMap.put(K_FALSE,"false");
		stMap.put(K_FINALLY,"finally");
		stMap.put(K_FOR,"for");
		stMap.put(K_IF,"if");
		stMap.put(K_IMPLEMENTS,"implements");
		stMap.put(K_IN,"in");
		stMap.put(K_MIXIN,"mixin");
		stMap.put(K_MODULE,"module");
		stMap.put(K_NEXT,"next");
		stMap.put(K_NEW,"new");
		stMap.put(K_NIL,"nil");
		stMap.put(K_PRIVATE,"private");
		stMap.put(K_PROTECTED,"protected");
		stMap.put(K_PUBLIC,"public");
		stMap.put(K_REQUIRE,"require");
		stMap.put(K_RETURN,"return");
		stMap.put(K_STATIC,"static");
		stMap.put(K_SUPER,"super");
		stMap.put(K_THIS,"this");
		stMap.put(K_THROW,"throw");
		stMap.put(K_TRUE,"true");
		stMap.put(K_TRY,"try");
		stMap.put(K_UNLESS,"unless");
		stMap.put(K_UNTIL,"until");
		stMap.put(K_VAL,"val");
		stMap.put(K_VAR,"var");
		stMap.put(K_WHEN,"when");
		stMap.put(K_WHILE,"while");
		stMap.put(K_FILE,"__FILE__");
		stMap.put(K_TARGET,"__TARGET__");
		stMap.put(COLON,":");
		stMap.put(COLON2,"::");
		stMap.put(SEMI,";");
		stMap.put(DOT,".");
		stMap.put(DOT2,"..");
		stMap.put(COMMA,",");
		stMap.put(LT,"<");
		stMap.put(LTEQ,"<=");
		stMap.put(LT2,"<<");
		stMap.put(LT2_EQ,"<<=");
		stMap.put(GT,">");
		stMap.put(GTEQ,">=");
		stMap.put(GT2,">>");
		stMap.put(GT2_EQ,">>=");
		stMap.put(EQ,"=");
		stMap.put(EQ2,"==");
		stMap.put(NEQ,"!=");
		stMap.put(EXCL,"!");
		stMap.put(TILDE,"~");
		stMap.put(CARET,"^");
		stMap.put(AND,"&");
		stMap.put(AND2,"&&");
		stMap.put(AND_EQ,"&=");
		stMap.put(OR,"|");
		stMap.put(OR2,"||");
		stMap.put(OR_EQ,"|=");
		stMap.put(STAR,"*");
		stMap.put(STAR_EQ,"*=");
		stMap.put(MINUS,"-");
		stMap.put(MINUS2,"--");
		stMap.put(MINUS_EQ,"-=");
		stMap.put(ARROW,"->");
		stMap.put(PLUS,"+");
		stMap.put(PLUS2,"++");
		stMap.put(PLUS_EQ,"+=");
		stMap.put(QMARK,"?");
		stMap.put(DIV,"/");
		stMap.put(DIV_EQ,"/=");
		stMap.put(LCURLY,"{");
		stMap.put(RCURLY,"}");
		stMap.put(LPAREN,"(");
		stMap.put(RPAREN,")");
		stMap.put(LBRACK,"[");
		stMap.put(RBRACK,"]");
		stMap.put(PCNT,"%");
		stMap.put(PCNT_EQ,"%=");
		stMap.put(IDENT,"<IDENT>");
		stMap.put(UNSIGNED_NUMBER,"<UNSIGNED_NUMBER>");
		stMap.put(REAL_NUMBER,"<REAL_NUMBER>");
		stMap.put(BASED_NUMBER,"<BASED_NUMBER>");
	}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LaolScanner(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 220) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token xnextToken() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
              {
                return create(Token.EOF);
              }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { error("Illegal character");
            }
          case 110: break;
          case 2: 
            { return create(EOL);
            }
          case 111: break;
          case 3: 
            { /* ignore */
            }
          case 112: break;
          case 4: 
            { return create(DIV);
            }
          case 113: break;
          case 5: 
            { return create(STAR);
            }
          case 114: break;
          case 6: 
            { return create(IDENT);
            }
          case 115: break;
          case 7: 
            { return create(UNSIGNED_NUMBER);
            }
          case 116: break;
          case 8: 
            { return create(PLUS);
            }
          case 117: break;
          case 9: 
            { return create(QMARK);
            }
          case 118: break;
          case 10: 
            { return create(COLON);
            }
          case 119: break;
          case 11: 
            { return create(SEMI);
            }
          case 120: break;
          case 12: 
            { return create(DOT);
            }
          case 121: break;
          case 13: 
            { return create(COMMA);
            }
          case 122: break;
          case 14: 
            { return create(LT);
            }
          case 123: break;
          case 15: 
            { return create(EQ);
            }
          case 124: break;
          case 16: 
            { return create(GT);
            }
          case 125: break;
          case 17: 
            { return create(EXCL);
            }
          case 126: break;
          case 18: 
            { return create(TILDE);
            }
          case 127: break;
          case 19: 
            { return create(CARET);
            }
          case 128: break;
          case 20: 
            { return create(AND);
            }
          case 129: break;
          case 21: 
            { return create(OR);
            }
          case 130: break;
          case 22: 
            { return create(MINUS);
            }
          case 131: break;
          case 23: 
            { return create(LCURLY);
            }
          case 132: break;
          case 24: 
            { return create(RCURLY);
            }
          case 133: break;
          case 25: 
            { return create(LPAREN);
            }
          case 134: break;
          case 26: 
            { return create(RPAREN);
            }
          case 135: break;
          case 27: 
            { return create(LBRACK);
            }
          case 136: break;
          case 28: 
            { return create(RBRACK);
            }
          case 137: break;
          case 29: 
            { return create(PCNT);
            }
          case 138: break;
          case 30: 
            { yybegin(STRING); string.setLength(0);
            }
          case 139: break;
          case 31: 
            { string.append( yytext() );
            }
          case 140: break;
          case 32: 
            { error("Unterminated string at end of line");
            }
          case 141: break;
          case 33: 
            { yybegin(YYINITIAL); return create(STRING_LITERAL, string.toString());
            }
          case 142: break;
          case 34: 
            { return create(COMMENT);
            }
          case 143: break;
          case 35: 
            { return create(DIV_EQ);
            }
          case 144: break;
          case 36: 
            { return create(STAR_EQ);
            }
          case 145: break;
          case 37: 
            { return create(PLUS2);
            }
          case 146: break;
          case 38: 
            { return create(PLUS_EQ);
            }
          case 147: break;
          case 39: 
            { return create(K_IF);
            }
          case 148: break;
          case 40: 
            { return create(K_IN);
            }
          case 149: break;
          case 41: 
            { return create(COLON2);
            }
          case 150: break;
          case 42: 
            { return create(DOT2);
            }
          case 151: break;
          case 43: 
            { return create(LT2);
            }
          case 152: break;
          case 44: 
            { return create(LTEQ);
            }
          case 153: break;
          case 45: 
            { return create(EQ2);
            }
          case 154: break;
          case 46: 
            { return create(GTEQ);
            }
          case 155: break;
          case 47: 
            { return create(GT2);
            }
          case 156: break;
          case 48: 
            { return create(NEQ);
            }
          case 157: break;
          case 49: 
            { return create(AND_EQ);
            }
          case 158: break;
          case 50: 
            { return create(AND2);
            }
          case 159: break;
          case 51: 
            { return create(OR_EQ);
            }
          case 160: break;
          case 52: 
            { return create(OR2);
            }
          case 161: break;
          case 53: 
            { return create(MINUS_EQ);
            }
          case 162: break;
          case 54: 
            { return create(ARROW);
            }
          case 163: break;
          case 55: 
            { return create(MINUS2);
            }
          case 164: break;
          case 56: 
            { return create(PCNT_EQ);
            }
          case 165: break;
          case 57: 
            { error("Illegal escape sequence");
            }
          case 166: break;
          case 58: 
            { char val = (char) Integer.parseInt(yytext().substring(1),8); string.append( val );
            }
          case 167: break;
          case 59: 
            { string.append( '\'' );
            }
          case 168: break;
          case 60: 
            { string.append( '\\' );
            }
          case 169: break;
          case 61: 
            { string.append( '\b' );
            }
          case 170: break;
          case 62: 
            { string.append( '\t' );
            }
          case 171: break;
          case 63: 
            { string.append( '\r' );
            }
          case 172: break;
          case 64: 
            { string.append( '\f' );
            }
          case 173: break;
          case 65: 
            { string.append( '\n' );
            }
          case 174: break;
          case 66: 
            { string.append( '\"' );
            }
          case 175: break;
          case 67: 
            { return create(BASED_NUMBER);
            }
          case 176: break;
          case 68: 
            { return create(K_TRY);
            }
          case 177: break;
          case 69: 
            { return create(K_DEF);
            }
          case 178: break;
          case 70: 
            { return create(K_FOR);
            }
          case 179: break;
          case 71: 
            { return create(K_NIL);
            }
          case 180: break;
          case 72: 
            { return create(K_NEW);
            }
          case 181: break;
          case 73: 
            { return create(K_VAR);
            }
          case 182: break;
          case 74: 
            { return create(K_VAL);
            }
          case 183: break;
          case 75: 
            { return create(LT2_EQ);
            }
          case 184: break;
          case 76: 
            { return create(GT2_EQ);
            }
          case 185: break;
          case 77: 
            { char val = (char) Integer.parseInt(yytext().substring(1),16); string.append( val );
            }
          case 186: break;
          case 78: 
            { return create(K_TRUE);
            }
          case 187: break;
          case 79: 
            { return create(K_THIS);
            }
          case 188: break;
          case 80: 
            { return create(K_CASE);
            }
          case 189: break;
          case 81: 
            { return create(K_ELSE);
            }
          case 190: break;
          case 82: 
            { return create(K_NEXT);
            }
          case 191: break;
          case 83: 
            { return create(K_WHEN);
            }
          case 192: break;
          case 84: 
            { return create(REAL_NUMBER);
            }
          case 193: break;
          case 85: 
            { return create(K_ALIAS);
            }
          case 194: break;
          case 86: 
            { return create(K_BREAK);
            }
          case 195: break;
          case 87: 
            { return create(K_SUPER);
            }
          case 196: break;
          case 88: 
            { return create(K_THROW);
            }
          case 197: break;
          case 89: 
            { return create(K_CATCH);
            }
          case 198: break;
          case 90: 
            { return create(K_CLASS);
            }
          case 199: break;
          case 91: 
            { return create(K_ELSIF);
            }
          case 200: break;
          case 92: 
            { return create(K_FALSE);
            }
          case 201: break;
          case 93: 
            { return create(K_MIXIN);
            }
          case 202: break;
          case 94: 
            { return create(K_UNTIL);
            }
          case 203: break;
          case 95: 
            { return create(K_WHILE);
            }
          case 204: break;
          case 96: 
            { return create(K_STATIC);
            }
          case 205: break;
          case 97: 
            { return create(K_RETURN);
            }
          case 206: break;
          case 98: 
            { return create(K_MODULE);
            }
          case 207: break;
          case 99: 
            { return create(K_PUBLIC);
            }
          case 208: break;
          case 100: 
            { return create(K_UNLESS);
            }
          case 209: break;
          case 101: 
            { return create(K_REQUIRE);
            }
          case 210: break;
          case 102: 
            { return create(K_EXTENDS);
            }
          case 211: break;
          case 103: 
            { return create(K_FINALLY);
            }
          case 212: break;
          case 104: 
            { return create(K_PRIVATE);
            }
          case 213: break;
          case 105: 
            { return create(K_FILE);
            }
          case 214: break;
          case 106: 
            { return create(K_ABSTRACT);
            }
          case 215: break;
          case 107: 
            { return create(K_PROTECTED);
            }
          case 216: break;
          case 108: 
            { return create(K_TARGET);
            }
          case 217: break;
          case 109: 
            { return create(K_IMPLEMENTS);
            }
          case 218: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
