/* The following code was generated by JFlex 1.6.1 */

package laol.parser;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.HashMap;
import apfe.runtime.Token;
import apfe.runtime.Scanner;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>laol.flex</tt>
 */
public class LaolScanner extends Scanner implements ITokenCodes {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\2\1\23\1\24\1\1\22\0\1\3\1\103\1\114"+
    "\2\0\1\7\1\106\1\22\1\110\1\111\1\5\1\26\1\77\1\37"+
    "\1\76\1\4\1\16\1\30\2\115\4\20\2\15\1\74\1\75\1\100"+
    "\1\101\1\102\1\27\1\0\1\71\1\33\1\17\1\32\1\25\1\65"+
    "\1\73\1\35\1\66\2\14\1\67\2\14\1\34\2\14\1\72\1\31"+
    "\1\70\6\14\1\112\1\36\1\113\1\105\1\21\1\0\1\40\1\41"+
    "\1\44\1\52\1\47\1\53\1\14\1\51\1\46\1\14\1\50\1\45"+
    "\1\60\1\55\1\57\1\61\1\64\1\10\1\42\1\43\1\62\1\63"+
    "\1\13\1\54\1\56\1\14\1\11\1\107\1\12\1\104\6\0\1\23"+
    "\32\0\1\6\u15df\0\1\6\u097f\0\13\6\35\0\1\23\1\23\5\0"+
    "\1\6\57\0\1\6\u0fa0\0\1\6\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\ud00f\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\2\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\2\7\2\12\1\7\1\1\1\13\1\14"+
    "\1\15\16\7\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\2\40\1\1\1\41\1\0"+
    "\1\42\1\0\1\43\1\44\2\0\1\45\2\7\3\0"+
    "\1\7\5\0\1\46\1\47\1\50\1\51\1\52\11\7"+
    "\1\53\1\54\17\7\1\55\1\56\1\57\1\60\1\61"+
    "\1\62\1\63\1\64\1\65\1\66\1\67\1\70\1\71"+
    "\1\72\2\73\1\74\1\75\1\76\1\77\1\71\1\100"+
    "\1\101\1\102\1\103\2\42\1\0\1\103\3\0\4\7"+
    "\7\0\2\7\4\104\1\105\5\7\1\106\11\7\1\107"+
    "\2\7\1\110\1\111\1\112\10\7\1\113\1\114\1\115"+
    "\1\116\1\73\1\117\1\0\1\120\3\7\1\121\1\0"+
    "\7\7\1\122\1\7\1\123\1\124\4\7\1\125\3\7"+
    "\1\126\7\7\1\117\2\7\1\127\1\130\3\7\1\131"+
    "\1\132\1\7\1\133\1\134\1\135\1\136\1\7\1\137"+
    "\1\7\1\140\1\7\1\141\4\7\1\142\1\7\1\143"+
    "\1\7\1\0\3\7\1\144\3\7\1\145\2\7\1\146"+
    "\1\147\1\150\1\130\1\0\4\7\1\151\1\152\1\153"+
    "\1\7\1\154\1\7\1\155\4\7\1\156\1\157\1\160";

  private static int [] zzUnpackAction() {
    int [] result = new int[289];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\116\0\234\0\352\0\234\0\u0138\0\u0186\0\u01d4"+
    "\0\u0222\0\u0270\0\234\0\234\0\u02be\0\u030c\0\u035a\0\u03a8"+
    "\0\u03f6\0\u0444\0\u0492\0\234\0\u04e0\0\u052e\0\u057c\0\u05ca"+
    "\0\u0618\0\u0666\0\u06b4\0\u0702\0\u0750\0\u079e\0\u07ec\0\u083a"+
    "\0\u0888\0\u08d6\0\u0924\0\u0972\0\234\0\u09c0\0\234\0\u0a0e"+
    "\0\u0a5c\0\u0aaa\0\u0af8\0\234\0\234\0\u0b46\0\u0b94\0\234"+
    "\0\234\0\234\0\234\0\234\0\u0be2\0\u0c30\0\234\0\u0c7e"+
    "\0\234\0\u0ccc\0\u0d1a\0\u0d68\0\u0ccc\0\234\0\u0db6\0\u0e04"+
    "\0\234\0\u0e52\0\u0ea0\0\u0eee\0\u0f3c\0\u0f8a\0\u0fd8\0\u1026"+
    "\0\u1074\0\u10c2\0\u1110\0\u115e\0\u11ac\0\234\0\u11ac\0\234"+
    "\0\234\0\u11fa\0\u1248\0\u1296\0\u12e4\0\u1332\0\u1380\0\u13ce"+
    "\0\u141c\0\u146a\0\u030c\0\u030c\0\u14b8\0\u1506\0\u1554\0\u15a2"+
    "\0\u15f0\0\u163e\0\u168c\0\u16da\0\u1728\0\u1776\0\u17c4\0\u1812"+
    "\0\u1860\0\u18ae\0\u18fc\0\234\0\234\0\u194a\0\234\0\234"+
    "\0\234\0\u1998\0\234\0\234\0\234\0\234\0\234\0\234"+
    "\0\234\0\u19e6\0\u1a34\0\234\0\234\0\234\0\234\0\u1a82"+
    "\0\234\0\234\0\234\0\234\0\u1ad0\0\234\0\u1b1e\0\u1b1e"+
    "\0\u1b6c\0\u1bba\0\u1c08\0\u1c56\0\u1ca4\0\u1cf2\0\u1d40\0\u0444"+
    "\0\u1d8e\0\u1ddc\0\u1e2a\0\u1e78\0\u1ec6\0\u1f14\0\u1f62\0\u1fb0"+
    "\0\u1ffe\0\u204c\0\u209a\0\u20e8\0\234\0\u2136\0\u2184\0\u21d2"+
    "\0\u2220\0\u226e\0\u030c\0\u22bc\0\u230a\0\u2358\0\u23a6\0\u23f4"+
    "\0\u2442\0\u2490\0\u24de\0\u252c\0\u030c\0\u257a\0\u25c8\0\u030c"+
    "\0\u030c\0\u030c\0\u2616\0\u2664\0\u26b2\0\u2700\0\u274e\0\u279c"+
    "\0\u27ea\0\u2838\0\u030c\0\u030c\0\234\0\234\0\234\0\u2886"+
    "\0\u28d4\0\234\0\u2922\0\u2970\0\u29be\0\u030c\0\u2a0c\0\u2a5a"+
    "\0\u2aa8\0\u2af6\0\u2b44\0\u2b92\0\u2be0\0\u2c2e\0\u030c\0\u2c7c"+
    "\0\u030c\0\u030c\0\u2cca\0\u2d18\0\u2d66\0\u2db4\0\u030c\0\u2e02"+
    "\0\u2e50\0\u2e9e\0\u030c\0\u2eec\0\u2f3a\0\u2f88\0\u2fd6\0\u3024"+
    "\0\u3072\0\u30c0\0\234\0\u310e\0\u315c\0\u030c\0\u31aa\0\u31f8"+
    "\0\u3246\0\u3294\0\u030c\0\u030c\0\u32e2\0\u030c\0\u030c\0\u030c"+
    "\0\u030c\0\u3330\0\u030c\0\u337e\0\u030c\0\u33cc\0\u030c\0\u341a"+
    "\0\u3468\0\u34b6\0\u3504\0\u030c\0\u3552\0\u030c\0\u35a0\0\u35ee"+
    "\0\u363c\0\u368a\0\u36d8\0\u030c\0\u3726\0\u3774\0\u37c2\0\u030c"+
    "\0\u3810\0\u385e\0\u030c\0\u030c\0\u030c\0\u38ac\0\u38fa\0\u3948"+
    "\0\u3996\0\u39e4\0\u3a32\0\u030c\0\u030c\0\u030c\0\u3a80\0\u030c"+
    "\0\u3ace\0\u030c\0\u3b1c\0\u3b6a\0\u3bb8\0\u3c06\0\u030c\0\u030c"+
    "\0\u030c";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[289];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\1\6\1\7\1\10\1\3\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\16"+
    "\1\17\1\21\1\22\1\3\1\6\1\16\1\23\1\24"+
    "\1\17\5\16\1\3\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\16\1\33\1\34\2\16\1\35\1\36\1\16"+
    "\1\37\2\16\1\40\1\41\1\42\1\43\10\16\1\44"+
    "\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54"+
    "\1\55\1\56\1\57\1\60\1\61\1\62\1\63\1\64"+
    "\1\17\1\65\1\66\1\67\33\65\1\70\55\65\1\71"+
    "\1\65\120\0\1\5\116\0\1\6\20\0\1\6\71\0"+
    "\1\72\3\0\1\73\1\74\1\0\14\72\2\0\54\72"+
    "\1\75\14\72\101\0\1\76\24\0\1\77\2\0\1\100"+
    "\32\0\1\100\32\0\1\101\24\0\1\16\2\0\7\16"+
    "\3\0\1\16\2\0\6\16\2\0\7\16\1\102\24\16"+
    "\21\0\1\16\10\0\1\16\2\0\7\16\3\0\1\16"+
    "\2\0\6\16\2\0\11\16\1\103\22\16\21\0\1\16"+
    "\10\0\1\16\2\0\7\16\3\0\1\16\2\0\6\16"+
    "\2\0\34\16\21\0\1\16\3\0\1\104\11\0\2\17"+
    "\1\0\2\17\1\105\1\0\1\104\3\0\1\17\64\0"+
    "\1\17\15\0\2\20\1\0\2\20\1\106\5\0\1\20"+
    "\64\0\1\20\10\0\1\16\2\0\6\16\1\107\3\0"+
    "\1\16\2\0\6\16\2\0\34\16\21\0\1\16\31\0"+
    "\1\110\1\111\1\112\1\113\1\114\3\0\1\112\1\110"+
    "\6\0\1\114\1\111\4\0\1\113\64\0\1\115\52\0"+
    "\1\116\53\0\1\117\41\0\1\120\1\121\23\0\1\16"+
    "\2\0\7\16\3\0\1\16\2\0\6\16\2\0\1\16"+
    "\1\122\3\16\1\123\26\16\21\0\1\16\10\0\1\124"+
    "\2\0\7\16\3\0\1\16\2\0\6\16\2\0\34\16"+
    "\21\0\1\16\10\0\1\16\2\0\7\16\3\0\1\16"+
    "\2\0\6\16\2\0\3\16\1\125\16\16\1\126\11\16"+
    "\21\0\1\16\10\0\1\127\2\0\7\16\3\0\1\16"+
    "\2\0\6\16\2\0\11\16\1\130\22\16\21\0\1\16"+
    "\10\0\1\16\2\0\7\16\3\0\1\16\2\0\6\16"+
    "\2\0\1\131\4\16\1\132\26\16\21\0\1\16\10\0"+
    "\1\16\2\0\7\16\3\0\1\16\2\0\6\16\2\0"+
    "\13\16\1\133\1\16\1\134\2\16\1\135\13\16\21\0"+
    "\1\16\10\0\1\16\2\0\7\16\3\0\1\16\2\0"+
    "\6\16\2\0\5\16\1\136\6\16\1\137\17\16\21\0"+
    "\1\16\10\0\1\16\2\0\7\16\3\0\1\16\2\0"+
    "\6\16\2\0\7\16\1\140\24\16\21\0\1\16\10\0"+
    "\1\16\2\0\7\16\3\0\1\16\2\0\6\16\2\0"+
    "\1\141\5\16\1\142\10\16\1\143\14\16\21\0\1\16"+
    "\10\0\1\16\2\0\7\16\3\0\1\16\2\0\6\16"+
    "\2\0\6\16\1\144\1\145\24\16\21\0\1\16\10\0"+
    "\1\16\2\0\7\16\3\0\1\16\2\0\6\16\2\0"+
    "\6\16\1\146\10\16\1\147\14\16\21\0\1\16\10\0"+
    "\1\150\2\0\7\16\3\0\1\16\2\0\6\16\2\0"+
    "\22\16\1\151\11\16\21\0\1\16\10\0\1\16\2\0"+
    "\7\16\3\0\1\16\2\0\6\16\2\0\15\16\1\152"+
    "\16\16\21\0\1\16\10\0\1\16\2\0\7\16\3\0"+
    "\1\16\2\0\6\16\2\0\1\153\33\16\21\0\1\16"+
    "\74\0\1\154\117\0\1\155\117\0\1\156\1\157\115\0"+
    "\1\160\115\0\1\161\1\162\114\0\1\163\115\0\1\164"+
    "\4\0\1\165\110\0\1\166\5\0\1\167\6\0\1\65"+
    "\2\0\33\65\1\0\55\65\1\0\1\65\2\0\1\67"+
    "\113\0\1\170\2\0\5\170\1\171\5\170\1\172\1\170"+
    "\1\173\1\170\1\174\2\0\3\170\1\172\5\170\1\175"+
    "\2\170\1\176\1\170\1\177\5\170\1\200\1\170\1\201"+
    "\1\170\1\202\36\170\1\203\1\172\1\72\3\0\1\204"+
    "\1\72\1\0\14\72\2\0\71\72\1\73\1\205\1\206"+
    "\113\73\1\74\3\207\1\210\1\211\1\207\14\74\2\207"+
    "\71\74\11\0\1\212\115\0\1\213\114\0\1\16\2\0"+
    "\7\16\3\0\1\16\2\0\6\16\2\0\3\16\1\214"+
    "\20\16\1\215\7\16\21\0\1\16\10\0\1\16\2\0"+
    "\7\16\3\0\1\16\2\0\6\16\2\0\6\16\1\216"+
    "\1\217\24\16\21\0\1\16\3\0\1\104\16\0\1\220"+
    "\1\0\1\104\71\0\1\221\2\0\20\221\2\0\4\221"+
    "\1\222\1\223\1\224\1\225\1\226\3\221\1\224\1\222"+
    "\6\221\1\226\1\223\4\221\1\225\37\221\2\0\20\221"+
    "\2\0\71\221\10\0\1\16\2\0\7\16\3\0\1\16"+
    "\2\0\6\16\2\0\25\16\1\227\2\16\1\230\3\16"+
    "\21\0\1\16\32\0\1\111\1\112\1\113\1\114\3\0"+
    "\1\112\7\0\1\114\1\111\4\0\1\113\41\0\1\111"+
    "\11\0\2\231\1\0\1\231\3\0\1\111\3\0\1\231"+
    "\64\0\1\231\3\0\1\112\12\0\1\232\5\0\1\112"+
    "\2\0\2\232\70\0\1\113\12\0\1\233\1\0\1\233"+
    "\3\0\1\113\2\0\2\233\64\0\1\233\3\0\1\114"+
    "\11\0\4\234\3\0\1\114\1\234\2\0\1\234\1\0"+
    "\2\234\4\0\2\234\2\0\1\234\2\0\1\234\2\0"+
    "\2\234\11\0\1\234\3\0\1\234\23\0\1\234\21\0"+
    "\1\235\104\0\1\16\2\0\7\16\3\0\1\16\2\0"+
    "\6\16\2\0\2\16\1\236\31\16\21\0\1\16\10\0"+
    "\1\16\2\0\7\16\3\0\1\16\2\0\6\16\2\0"+
    "\6\16\1\237\25\16\21\0\1\16\10\0\1\16\2\0"+
    "\7\16\3\0\1\16\2\0\6\16\2\0\7\16\1\240"+
    "\24\16\21\0\1\16\10\0\1\16\2\0\7\16\3\0"+
    "\1\16\2\0\6\16\2\0\1\241\33\16\21\0\1\16"+
    "\10\0\1\16\2\0\7\16\3\0\1\16\2\0\6\16"+
    "\2\0\21\16\1\242\12\16\21\0\1\16\10\0\1\16"+
    "\2\0\7\16\3\0\1\16\2\0\6\16\2\0\16\16"+
    "\1\243\3\16\1\244\11\16\21\0\1\16\10\0\1\245"+
    "\2\0\7\16\3\0\1\16\2\0\6\16\2\0\6\16"+
    "\1\246\25\16\21\0\1\16\10\0\1\16\2\0\7\16"+
    "\3\0\1\16\2\0\6\16\2\0\2\16\1\247\1\250"+
    "\30\16\21\0\1\16\10\0\1\16\2\0\7\16\3\0"+
    "\1\16\2\0\6\16\2\0\1\251\33\16\21\0\1\16"+
    "\10\0\1\16\2\0\7\16\3\0\1\16\2\0\6\16"+
    "\2\0\21\16\1\252\12\16\21\0\1\16\10\0\1\16"+
    "\2\0\7\16\3\0\1\16\2\0\6\16\2\0\2\16"+
    "\1\253\31\16\21\0\1\16\10\0\1\16\2\0\7\16"+
    "\3\0\1\16\2\0\6\16\2\0\3\16\1\254\30\16"+
    "\21\0\1\16\10\0\1\16\2\0\7\16\3\0\1\16"+
    "\2\0\6\16\2\0\13\16\1\255\20\16\21\0\1\16"+
    "\10\0\1\16\2\0\7\16\3\0\1\16\2\0\6\16"+
    "\2\0\5\16\1\256\26\16\21\0\1\16\10\0\1\16"+
    "\2\0\7\16\3\0\1\16\2\0\6\16\2\0\15\16"+
    "\1\257\16\16\21\0\1\16\10\0\1\260\2\0\7\16"+
    "\3\0\1\16\2\0\6\16\2\0\34\16\21\0\1\16"+
    "\10\0\1\16\2\0\7\16\3\0\1\16\2\0\6\16"+
    "\2\0\5\16\1\261\26\16\21\0\1\16\10\0\1\16"+
    "\2\0\1\262\6\16\3\0\1\16\2\0\6\16\2\0"+
    "\14\16\1\263\17\16\21\0\1\16\10\0\1\16\2\0"+
    "\7\16\3\0\1\16\2\0\6\16\2\0\14\16\1\264"+
    "\17\16\21\0\1\16\10\0\1\16\2\0\7\16\3\0"+
    "\1\16\2\0\6\16\2\0\12\16\1\265\21\16\21\0"+
    "\1\16\10\0\1\16\2\0\7\16\3\0\1\16\2\0"+
    "\6\16\2\0\6\16\1\266\10\16\1\267\14\16\21\0"+
    "\1\16\10\0\1\16\2\0\7\16\3\0\1\16\2\0"+
    "\6\16\2\0\1\16\1\270\32\16\21\0\1\16\10\0"+
    "\1\16\2\0\7\16\3\0\1\16\2\0\6\16\2\0"+
    "\3\16\1\271\1\16\1\272\26\16\21\0\1\16\10\0"+
    "\1\273\2\0\7\16\3\0\1\16\2\0\6\16\2\0"+
    "\5\16\1\274\26\16\21\0\1\16\101\0\1\275\115\0"+
    "\1\276\32\0\1\173\1\0\1\173\7\0\1\173\64\0"+
    "\1\173\16\0\1\277\1\0\1\277\7\0\1\277\64\0"+
    "\1\277\15\0\4\300\4\0\1\300\2\0\1\300\1\0"+
    "\2\300\4\0\2\300\2\0\1\300\2\0\1\300\2\0"+
    "\2\300\11\0\1\300\3\0\1\300\23\0\1\300\2\0"+
    "\1\206\113\0\5\207\1\301\110\207\1\74\3\207\1\206"+
    "\1\211\1\207\14\74\2\207\71\74\12\212\1\204\103\212"+
    "\12\213\1\302\103\213\10\0\1\16\2\0\7\16\3\0"+
    "\1\16\2\0\6\16\2\0\22\16\1\303\11\16\21\0"+
    "\1\16\10\0\1\16\2\0\7\16\3\0\1\16\2\0"+
    "\6\16\2\0\22\16\1\304\11\16\21\0\1\16\10\0"+
    "\1\16\2\0\7\16\3\0\1\16\2\0\6\16\2\0"+
    "\5\16\1\305\26\16\21\0\1\16\10\0\1\16\2\0"+
    "\7\16\3\0\1\16\2\0\6\16\2\0\15\16\1\306"+
    "\16\16\21\0\1\16\22\0\1\307\115\0\1\307\7\0"+
    "\1\111\1\112\1\113\1\114\3\0\1\112\7\0\1\114"+
    "\1\111\4\0\1\113\41\0\1\111\11\0\2\231\1\0"+
    "\1\231\1\0\1\307\1\0\1\111\3\0\1\231\64\0"+
    "\1\231\3\0\1\112\12\0\1\232\3\0\1\307\1\0"+
    "\1\112\2\0\2\232\70\0\1\113\12\0\1\233\1\0"+
    "\1\233\1\0\1\307\1\0\1\113\2\0\2\233\64\0"+
    "\1\233\3\0\1\114\11\0\4\234\1\0\1\307\1\0"+
    "\1\114\1\234\2\0\1\234\1\0\2\234\4\0\2\234"+
    "\2\0\1\234\2\0\1\234\2\0\2\234\11\0\1\234"+
    "\3\0\1\234\23\0\1\234\10\0\1\16\2\0\7\16"+
    "\3\0\1\16\2\0\6\16\2\0\26\16\1\310\5\16"+
    "\21\0\1\16\10\0\1\16\2\0\7\16\3\0\1\16"+
    "\2\0\6\16\2\0\31\16\1\311\2\16\21\0\1\16"+
    "\15\0\2\231\1\0\2\231\6\0\1\231\64\0\1\231"+
    "\16\0\1\232\2\0\1\232\6\0\1\232\103\0\1\233"+
    "\1\0\2\233\6\0\1\233\64\0\1\233\15\0\5\234"+
    "\3\0\1\234\2\0\1\234\1\0\2\234\4\0\2\234"+
    "\2\0\1\234\2\0\1\234\2\0\2\234\11\0\1\234"+
    "\3\0\1\234\23\0\1\234\10\0\1\16\2\0\7\16"+
    "\3\0\1\16\2\0\6\16\2\0\3\16\1\312\30\16"+
    "\21\0\1\16\10\0\1\16\2\0\7\16\3\0\1\16"+
    "\2\0\6\16\2\0\1\313\33\16\21\0\1\16\10\0"+
    "\1\16\2\0\7\16\3\0\1\16\2\0\6\16\2\0"+
    "\1\314\33\16\21\0\1\16\10\0\1\16\2\0\7\16"+
    "\3\0\1\16\2\0\6\16\2\0\3\16\1\315\30\16"+
    "\21\0\1\16\10\0\1\16\2\0\7\16\3\0\1\16"+
    "\2\0\6\16\2\0\7\16\1\316\24\16\21\0\1\16"+
    "\10\0\1\16\2\0\7\16\3\0\1\16\2\0\6\16"+
    "\2\0\7\16\1\317\24\16\21\0\1\16\10\0\1\16"+
    "\2\0\7\16\3\0\1\16\2\0\6\16\2\0\17\16"+
    "\1\320\14\16\21\0\1\16\10\0\1\16\2\0\7\16"+
    "\3\0\1\16\2\0\6\16\2\0\2\16\1\321\31\16"+
    "\21\0\1\16\10\0\1\16\2\0\7\16\3\0\1\16"+
    "\2\0\6\16\2\0\7\16\1\322\24\16\21\0\1\16"+
    "\10\0\1\16\2\0\7\16\3\0\1\16\2\0\6\16"+
    "\2\0\4\16\1\323\27\16\21\0\1\16\10\0\1\16"+
    "\2\0\7\16\3\0\1\16\2\0\6\16\2\0\2\16"+
    "\1\324\31\16\21\0\1\16\10\0\1\16\2\0\7\16"+
    "\3\0\1\16\2\0\6\16\2\0\5\16\1\325\26\16"+
    "\21\0\1\16\10\0\1\16\2\0\7\16\3\0\1\16"+
    "\2\0\6\16\2\0\6\16\1\326\1\327\24\16\21\0"+
    "\1\16\10\0\1\16\2\0\7\16\3\0\1\16\2\0"+
    "\6\16\2\0\7\16\1\330\24\16\21\0\1\16\10\0"+
    "\1\16\2\0\7\16\3\0\1\16\2\0\6\16\2\0"+
    "\2\16\1\331\31\16\21\0\1\16\10\0\1\16\2\0"+
    "\7\16\3\0\1\16\2\0\6\16\2\0\1\332\33\16"+
    "\21\0\1\16\10\0\1\16\2\0\7\16\3\0\1\16"+
    "\2\0\6\16\2\0\3\16\1\333\30\16\21\0\1\16"+
    "\10\0\1\16\2\0\7\16\3\0\1\16\2\0\6\16"+
    "\2\0\6\16\1\334\25\16\21\0\1\16\10\0\1\16"+
    "\2\0\7\16\3\0\1\16\2\0\6\16\2\0\22\16"+
    "\1\335\11\16\21\0\1\16\10\0\1\16\2\0\7\16"+
    "\3\0\1\16\2\0\6\16\2\0\23\16\1\336\10\16"+
    "\21\0\1\16\10\0\1\16\2\0\7\16\3\0\1\16"+
    "\2\0\6\16\2\0\3\16\1\337\30\16\21\0\1\16"+
    "\10\0\1\16\2\0\7\16\3\0\1\16\2\0\6\16"+
    "\2\0\5\16\1\340\26\16\21\0\1\16\10\0\1\16"+
    "\2\0\7\16\3\0\1\16\2\0\6\16\2\0\6\16"+
    "\1\341\25\16\21\0\1\16\10\0\1\16\2\0\7\16"+
    "\3\0\1\16\2\0\6\16\2\0\7\16\1\342\24\16"+
    "\21\0\1\16\15\0\4\343\4\0\1\343\2\0\1\343"+
    "\1\0\2\343\4\0\2\343\2\0\1\343\2\0\1\343"+
    "\2\0\2\343\11\0\1\343\3\0\1\343\23\0\1\343"+
    "\4\207\1\206\1\301\110\207\10\0\1\344\2\0\7\16"+
    "\3\0\1\16\2\0\6\16\2\0\34\16\21\0\1\16"+
    "\10\0\1\16\2\0\7\16\3\0\1\16\2\0\6\16"+
    "\2\0\6\16\1\345\25\16\21\0\1\16\10\0\1\16"+
    "\2\0\7\16\3\0\1\16\2\0\6\16\2\0\7\16"+
    "\1\346\24\16\21\0\1\16\15\0\2\347\1\0\1\347"+
    "\7\0\1\347\64\0\1\347\10\0\1\16\2\0\7\16"+
    "\3\0\1\16\2\0\6\16\2\0\27\16\1\350\4\16"+
    "\21\0\1\16\10\0\1\16\2\0\7\16\3\0\1\16"+
    "\2\0\6\16\2\0\32\16\1\351\1\16\21\0\1\16"+
    "\10\0\1\352\2\0\7\16\3\0\1\16\2\0\6\16"+
    "\2\0\34\16\21\0\1\16\10\0\1\16\2\0\7\16"+
    "\3\0\1\16\2\0\6\16\2\0\2\16\1\353\31\16"+
    "\21\0\1\16\10\0\1\16\2\0\7\16\3\0\1\16"+
    "\2\0\6\16\2\0\10\16\1\354\23\16\21\0\1\16"+
    "\10\0\1\16\2\0\7\16\3\0\1\16\2\0\6\16"+
    "\2\0\6\16\1\355\25\16\21\0\1\16\10\0\1\356"+
    "\2\0\7\16\3\0\1\16\2\0\6\16\2\0\34\16"+
    "\21\0\1\16\10\0\1\16\2\0\1\357\6\16\3\0"+
    "\1\16\2\0\6\16\2\0\34\16\21\0\1\16\10\0"+
    "\1\16\2\0\7\16\3\0\1\16\2\0\6\16\2\0"+
    "\11\16\1\360\22\16\21\0\1\16\10\0\1\16\2\0"+
    "\7\16\3\0\1\16\2\0\6\16\2\0\2\16\1\361"+
    "\31\16\21\0\1\16\10\0\1\16\2\0\7\16\3\0"+
    "\1\16\2\0\6\16\2\0\7\16\1\362\24\16\21\0"+
    "\1\16\10\0\1\16\2\0\7\16\3\0\1\16\2\0"+
    "\6\16\2\0\13\16\1\363\20\16\21\0\1\16\10\0"+
    "\1\16\2\0\7\16\3\0\1\16\2\0\6\16\2\0"+
    "\15\16\1\364\16\16\21\0\1\16\10\0\1\16\2\0"+
    "\7\16\3\0\1\16\2\0\6\16\2\0\7\16\1\365"+
    "\24\16\21\0\1\16\10\0\1\16\2\0\7\16\3\0"+
    "\1\16\2\0\6\16\2\0\5\16\1\366\26\16\21\0"+
    "\1\16\10\0\1\16\2\0\7\16\3\0\1\16\2\0"+
    "\6\16\2\0\15\16\1\367\16\16\21\0\1\16\10\0"+
    "\1\16\2\0\7\16\3\0\1\16\2\0\6\16\2\0"+
    "\5\16\1\370\26\16\21\0\1\16\10\0\1\16\2\0"+
    "\7\16\3\0\1\16\2\0\6\16\2\0\1\371\33\16"+
    "\21\0\1\16\10\0\1\16\2\0\7\16\3\0\1\16"+
    "\2\0\6\16\2\0\7\16\1\372\24\16\21\0\1\16"+
    "\10\0\1\16\2\0\7\16\3\0\1\16\2\0\6\16"+
    "\2\0\6\16\1\373\25\16\21\0\1\16\10\0\1\16"+
    "\2\0\7\16\3\0\1\16\2\0\6\16\2\0\5\16"+
    "\1\374\26\16\21\0\1\16\10\0\1\16\2\0\7\16"+
    "\3\0\1\16\2\0\6\16\2\0\2\16\1\375\31\16"+
    "\21\0\1\16\10\0\1\16\2\0\7\16\3\0\1\16"+
    "\2\0\6\16\2\0\15\16\1\376\16\16\21\0\1\16"+
    "\10\0\1\377\2\0\7\16\3\0\1\16\2\0\6\16"+
    "\2\0\34\16\21\0\1\16\15\0\2\347\1\0\2\347"+
    "\3\0\1\u0100\2\0\1\347\16\0\1\u0100\45\0\1\347"+
    "\10\0\1\16\2\0\7\16\3\0\1\u0101\2\0\6\16"+
    "\2\0\34\16\21\0\1\16\10\0\1\16\2\0\7\16"+
    "\3\0\1\16\2\0\6\16\2\0\33\16\1\u0102\21\0"+
    "\1\16\10\0\1\16\2\0\7\16\3\0\1\16\2\0"+
    "\6\16\2\0\1\u0103\33\16\21\0\1\16\10\0\1\16"+
    "\2\0\7\16\3\0\1\16\2\0\6\16\2\0\4\16"+
    "\1\u0104\27\16\21\0\1\16\10\0\1\16\2\0\7\16"+
    "\3\0\1\16\2\0\6\16\2\0\20\16\1\u0105\13\16"+
    "\21\0\1\16\10\0\1\16\2\0\7\16\3\0\1\16"+
    "\2\0\6\16\2\0\12\16\1\u0106\21\16\21\0\1\16"+
    "\10\0\1\16\2\0\7\16\3\0\1\16\2\0\6\16"+
    "\2\0\5\16\1\u0107\26\16\21\0\1\16\10\0\1\16"+
    "\2\0\7\16\3\0\1\16\2\0\6\16\2\0\7\16"+
    "\1\u0108\24\16\21\0\1\16\10\0\1\16\2\0\7\16"+
    "\3\0\1\16\2\0\6\16\2\0\3\16\1\u0109\30\16"+
    "\21\0\1\16\10\0\1\16\2\0\7\16\3\0\1\16"+
    "\2\0\6\16\2\0\4\16\1\u010a\27\16\21\0\1\16"+
    "\10\0\1\16\2\0\7\16\3\0\1\16\2\0\6\16"+
    "\2\0\4\16\1\u010b\27\16\21\0\1\16\10\0\1\16"+
    "\2\0\7\16\3\0\1\16\2\0\6\16\2\0\2\16"+
    "\1\u010c\31\16\21\0\1\16\10\0\1\16\2\0\7\16"+
    "\3\0\1\16\2\0\6\16\2\0\7\16\1\u010d\24\16"+
    "\21\0\1\16\15\0\2\u010e\1\0\1\u010e\5\0\1\u010f"+
    "\1\0\1\u010e\6\0\1\u010f\55\0\1\u010e\10\0\1\16"+
    "\2\0\6\16\1\u0110\3\0\1\16\2\0\6\16\2\0"+
    "\34\16\21\0\1\16\10\0\1\16\2\0\7\16\3\0"+
    "\1\u0111\2\0\6\16\2\0\34\16\21\0\1\16\10\0"+
    "\1\16\2\0\7\16\3\0\1\16\2\0\6\16\2\0"+
    "\4\16\1\u0112\27\16\21\0\1\16\10\0\1\16\2\0"+
    "\7\16\3\0\1\16\2\0\6\16\2\0\7\16\1\u0113"+
    "\24\16\21\0\1\16\10\0\1\16\2\0\7\16\3\0"+
    "\1\16\2\0\6\16\2\0\2\16\1\u0114\31\16\21\0"+
    "\1\16\10\0\1\16\2\0\7\16\3\0\1\16\2\0"+
    "\6\16\2\0\16\16\1\u0115\15\16\21\0\1\16\10\0"+
    "\1\16\2\0\7\16\3\0\1\16\2\0\6\16\2\0"+
    "\7\16\1\u0116\24\16\21\0\1\16\10\0\1\16\2\0"+
    "\7\16\3\0\1\16\2\0\6\16\2\0\3\16\1\u0117"+
    "\30\16\21\0\1\16\15\0\2\u010e\1\0\2\u010e\6\0"+
    "\1\u010e\64\0\1\u010e\15\0\2\u010e\1\0\1\u010e\7\0"+
    "\1\u010e\64\0\1\u010e\10\0\1\16\2\0\6\16\1\u0118"+
    "\3\0\1\16\2\0\6\16\2\0\34\16\21\0\1\16"+
    "\10\0\1\16\2\0\7\16\3\0\1\16\2\0\6\16"+
    "\2\0\30\16\1\u0119\3\16\21\0\1\16\10\0\1\16"+
    "\2\0\7\16\3\0\1\16\2\0\6\16\2\0\3\16"+
    "\1\u011a\30\16\21\0\1\16\10\0\1\16\2\0\7\16"+
    "\3\0\1\16\2\0\6\16\2\0\15\16\1\u011b\16\16"+
    "\21\0\1\16\10\0\1\16\2\0\7\16\3\0\1\16"+
    "\2\0\6\16\2\0\7\16\1\u011c\24\16\21\0\1\16"+
    "\10\0\1\16\2\0\6\16\1\u011d\3\0\1\16\2\0"+
    "\6\16\2\0\34\16\21\0\1\16\10\0\1\16\2\0"+
    "\7\16\3\0\1\16\2\0\6\16\2\0\3\16\1\u011e"+
    "\30\16\21\0\1\16\10\0\1\16\2\0\7\16\3\0"+
    "\1\16\2\0\6\16\2\0\12\16\1\u011f\21\16\21\0"+
    "\1\16\10\0\1\16\2\0\6\16\1\u0120\3\0\1\16"+
    "\2\0\6\16\2\0\34\16\21\0\1\16\10\0\1\16"+
    "\2\0\7\16\3\0\1\16\2\0\6\16\2\0\2\16"+
    "\1\u0121\31\16\21\0\1\16";

  private static int [] zzUnpackTrans() {
    int [] result = new int[15444];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\1\1\1\11\5\1\2\11\7\1\1\11"+
    "\20\1\1\11\1\1\1\11\4\1\2\11\2\1\5\11"+
    "\2\1\1\11\1\1\1\11\1\0\1\1\1\0\1\1"+
    "\1\11\2\0\1\11\2\1\3\0\1\1\5\0\1\1"+
    "\1\11\1\1\2\11\32\1\2\11\1\1\3\11\1\1"+
    "\7\11\2\1\4\11\1\1\4\11\1\1\1\11\1\0"+
    "\1\1\3\0\4\1\7\0\6\1\1\11\37\1\3\11"+
    "\1\1\1\0\1\11\4\1\1\0\33\1\1\11\34\1"+
    "\1\0\16\1\1\0\22\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[289];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
  private final StringBuilder string = new StringBuilder();

  private static String stFileName = null;

  public static void setFileName(String fn) {
    stFileName = fn;
  }

  public static String getFileName() {
    return stFileName;
  }

  private Token create(int id, String text) {
  	return new Token(stFileName, yyline+1, yycolumn+1, text, id);
  }

  private Token create(int id) {
  	return create(id, yytext());
  }

    public static LaolScanner create(String fn) throws IOException {
        try (FileReader rdr = new FileReader(fn)) {
            LaolScanner scanner = new LaolScanner(rdr);
            setFileName(fn);
            scanner.slurp();
            return scanner;
        }
    }

  //TODO: derive from RuntimeException to pass back to parser
  private void error(String msg) {
      StringBuilder sb = new StringBuilder("Error: ");
      sb.append(getFileName()).append(':').append(yyline+1).append(':')
              .append(yycolumn+1).append(": ").append(msg)
              .append(": ").append(yytext());
      throw new RuntimeException(sb.toString());
  }

    @Override
    public Token nextToken() {
        try {
            return xnextToken();
        } catch (IOException ex) {
            throw new RuntimeException(ex);
        }
    }

  @Override  
  public boolean isEOF() {
    return zzAtEOF;
    }

	@Override
	public String getAsString(int tokCode) {
		return stMap.get(tokCode);
	}

	private static final HashMap<Integer,String> stMap = new HashMap<>();
	static {
		stMap.put(COMMENT,"<COMMENT>");
		stMap.put(STRING_LITERAL,"<STRING>");
		stMap.put(ARRAY_OF,"%[wi]{...}");
		stMap.put(REGEXP,"/.../|%r{...}");
		stMap.put(PREFIX_OP,"(--|++)_");
		stMap.put(NL,"\\n");
		//{contents of map
		stMap.put(K_ABSTRACT,"abstract");
		stMap.put(K_ALIAS,"alias");
		stMap.put(K_BREAK,"break");
		stMap.put(K_CASE,"case");
		stMap.put(K_CATCH,"catch");
		stMap.put(K_CLASS,"class");
		stMap.put(K_DEF,"def");
		stMap.put(K_ELSE,"else");
		stMap.put(K_ELSIF,"elsif");
		stMap.put(K_EXTENDS,"extends");
		stMap.put(K_FALSE,"false");
		stMap.put(K_FINALLY,"finally");
		stMap.put(K_FOR,"for");
		stMap.put(K_IF,"if");
		stMap.put(K_IMPLEMENTS,"implements");
		stMap.put(K_IN,"in");
		stMap.put(K_MIXIN,"mixin");
		stMap.put(K_MODULE,"module");
		stMap.put(K_NEXT,"next");
		stMap.put(K_NEW,"new");
		stMap.put(K_NIL,"nil");
		stMap.put(K_PRIVATE,"private");
		stMap.put(K_PROTECTED,"protected");
		stMap.put(K_PUBLIC,"public");
		stMap.put(K_REQUIRE,"require");
		stMap.put(K_RETURN,"return");
		stMap.put(K_STATIC,"static");
		stMap.put(K_SUPER,"super");
		stMap.put(K_THIS,"this");
		stMap.put(K_THROW,"throw");
		stMap.put(K_TRUE,"true");
		stMap.put(K_TRY,"try");
		stMap.put(K_UNLESS,"unless");
		stMap.put(K_UNTIL,"until");
		stMap.put(K_VAL,"val");
		stMap.put(K_VAR,"var");
		stMap.put(K_WHEN,"when");
		stMap.put(K_WHILE,"while");
		stMap.put(K_FILE,"__FILE__");
		stMap.put(K_TARGET,"__TARGET__");
		stMap.put(COLON,":");
		stMap.put(COLON2,"::");
		stMap.put(SEMI,";");
		stMap.put(DOT,".");
		stMap.put(DOT2,"..");
		stMap.put(COMMA,",");
		stMap.put(LT,"<");
		stMap.put(LTEQ,"<=");
		stMap.put(LT2,"<<");
		stMap.put(LT2_EQ,"<<=");
		stMap.put(GT,">");
		stMap.put(GTEQ,">=");
		stMap.put(GT2,">>");
		stMap.put(GT2_EQ,">>=");
		stMap.put(EQ,"=");
		stMap.put(EQ2,"==");
		stMap.put(NEQ,"!=");
		stMap.put(EXCL,"!");
		stMap.put(TILDE,"~");
		stMap.put(CARET,"^");
		stMap.put(AND,"&");
		stMap.put(AND2,"&&");
		stMap.put(AND_EQ,"&=");
		stMap.put(OR,"|");
		stMap.put(OR2,"||");
		stMap.put(OR_EQ,"|=");
		stMap.put(STAR,"*");
		stMap.put(STAR_EQ,"*=");
		stMap.put(MINUS,"-");
		stMap.put(MINUS2,"--");
		stMap.put(MINUS_EQ,"-=");
		stMap.put(ARROW,"->");
		stMap.put(PLUS,"+");
		stMap.put(PLUS2,"++");
		stMap.put(PLUS_EQ,"+=");
		stMap.put(QMARK,"?");
		stMap.put(DIV,"/");
		stMap.put(DIV_EQ,"/=");
		stMap.put(LCURLY,"{");
		stMap.put(RCURLY,"}");
		stMap.put(LPAREN,"(");
		stMap.put(RPAREN,")");
		stMap.put(LBRACK,"[");
		stMap.put(RBRACK,"]");
		stMap.put(PCNT,"%");
		stMap.put(PCNT_EQ,"%=");
		stMap.put(IDENT,"<IDENT>");
		stMap.put(UNSIGNED_NUMBER,"<UNSIGNED_NUMBER>");
		stMap.put(REAL_NUMBER,"<REAL_NUMBER>");
		stMap.put(BASED_NUMBER,"<BASED_NUMBER>");
		//}map
	}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LaolScanner(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 244) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token xnextToken() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
              {
                return create(Token.EOF);
              }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { error("Illegal character");
            }
          case 113: break;
          case 2: 
            { return create(NL);
            }
          case 114: break;
          case 3: 
            { /* ignore */
            }
          case 115: break;
          case 4: 
            { return create(DIV);
            }
          case 116: break;
          case 5: 
            { return create(STAR);
            }
          case 117: break;
          case 6: 
            { return create(PCNT);
            }
          case 118: break;
          case 7: 
            { return create(IDENT);
            }
          case 119: break;
          case 8: 
            { return create(LCURLY);
            }
          case 120: break;
          case 9: 
            { return create(RCURLY);
            }
          case 121: break;
          case 10: 
            { return create(UNSIGNED_NUMBER);
            }
          case 122: break;
          case 11: 
            { return create(PLUS);
            }
          case 123: break;
          case 12: 
            { return create(QMARK);
            }
          case 124: break;
          case 13: 
            { return create(MINUS);
            }
          case 125: break;
          case 14: 
            { return create(COLON);
            }
          case 126: break;
          case 15: 
            { return create(SEMI);
            }
          case 127: break;
          case 16: 
            { return create(DOT);
            }
          case 128: break;
          case 17: 
            { return create(COMMA);
            }
          case 129: break;
          case 18: 
            { return create(LT);
            }
          case 130: break;
          case 19: 
            { return create(EQ);
            }
          case 131: break;
          case 20: 
            { return create(GT);
            }
          case 132: break;
          case 21: 
            { return create(EXCL);
            }
          case 133: break;
          case 22: 
            { return create(TILDE);
            }
          case 134: break;
          case 23: 
            { return create(CARET);
            }
          case 135: break;
          case 24: 
            { return create(AND);
            }
          case 136: break;
          case 25: 
            { return create(OR);
            }
          case 137: break;
          case 26: 
            { return create(LPAREN);
            }
          case 138: break;
          case 27: 
            { return create(RPAREN);
            }
          case 139: break;
          case 28: 
            { return create(LBRACK);
            }
          case 140: break;
          case 29: 
            { return create(RBRACK);
            }
          case 141: break;
          case 30: 
            { yybegin(STRING); string.setLength(0);
            }
          case 142: break;
          case 31: 
            { string.append( yytext() );
            }
          case 143: break;
          case 32: 
            { error("Unterminated string at end of line");
            }
          case 144: break;
          case 33: 
            { yybegin(YYINITIAL); return create(STRING_LITERAL, string.toString());
            }
          case 145: break;
          case 34: 
            { return create(COMMENT);
            }
          case 146: break;
          case 35: 
            { return create(DIV_EQ);
            }
          case 147: break;
          case 36: 
            { return create(STAR_EQ);
            }
          case 148: break;
          case 37: 
            { return create(PCNT_EQ);
            }
          case 149: break;
          case 38: 
            { return create(PLUS2);
            }
          case 150: break;
          case 39: 
            { return create(PLUS_EQ);
            }
          case 151: break;
          case 40: 
            { return create(MINUS2);
            }
          case 152: break;
          case 41: 
            { return create(MINUS_EQ);
            }
          case 153: break;
          case 42: 
            { return create(ARROW);
            }
          case 154: break;
          case 43: 
            { return create(K_IF);
            }
          case 155: break;
          case 44: 
            { return create(K_IN);
            }
          case 156: break;
          case 45: 
            { return create(COLON2);
            }
          case 157: break;
          case 46: 
            { return create(DOT2);
            }
          case 158: break;
          case 47: 
            { return create(LT2);
            }
          case 159: break;
          case 48: 
            { return create(LTEQ);
            }
          case 160: break;
          case 49: 
            { return create(EQ2);
            }
          case 161: break;
          case 50: 
            { return create(GTEQ);
            }
          case 162: break;
          case 51: 
            { return create(GT2);
            }
          case 163: break;
          case 52: 
            { return create(NEQ);
            }
          case 164: break;
          case 53: 
            { return create(AND_EQ);
            }
          case 165: break;
          case 54: 
            { return create(AND2);
            }
          case 166: break;
          case 55: 
            { return create(OR_EQ);
            }
          case 167: break;
          case 56: 
            { return create(OR2);
            }
          case 168: break;
          case 57: 
            { error("Illegal escape sequence");
            }
          case 169: break;
          case 58: 
            { string.append( '\r' );
            }
          case 170: break;
          case 59: 
            { char val = (char) Integer.parseInt(yytext().substring(1),8); string.append( val );
            }
          case 171: break;
          case 60: 
            { string.append( '\'' );
            }
          case 172: break;
          case 61: 
            { string.append( '\\' );
            }
          case 173: break;
          case 62: 
            { string.append( '\b' );
            }
          case 174: break;
          case 63: 
            { string.append( '\t' );
            }
          case 175: break;
          case 64: 
            { string.append( '\f' );
            }
          case 176: break;
          case 65: 
            { string.append( '\n' );
            }
          case 177: break;
          case 66: 
            { string.append( '\"' );
            }
          case 178: break;
          case 67: 
            { return create(REGEXP);
            }
          case 179: break;
          case 68: 
            { return create(BASED_NUMBER);
            }
          case 180: break;
          case 69: 
            { return create(PREFIX_OP);
            }
          case 181: break;
          case 70: 
            { return create(K_TRY);
            }
          case 182: break;
          case 71: 
            { return create(K_DEF);
            }
          case 183: break;
          case 72: 
            { return create(K_FOR);
            }
          case 184: break;
          case 73: 
            { return create(K_NIL);
            }
          case 185: break;
          case 74: 
            { return create(K_NEW);
            }
          case 186: break;
          case 75: 
            { return create(K_VAR);
            }
          case 187: break;
          case 76: 
            { return create(K_VAL);
            }
          case 188: break;
          case 77: 
            { return create(LT2_EQ);
            }
          case 189: break;
          case 78: 
            { return create(GT2_EQ);
            }
          case 190: break;
          case 79: 
            { char val = (char) Integer.parseInt(yytext().substring(1),16); string.append( val );
            }
          case 191: break;
          case 80: 
            { return create(ARRAY_OF);
            }
          case 192: break;
          case 81: 
            { return create(K_WHEN);
            }
          case 193: break;
          case 82: 
            { return create(K_TRUE);
            }
          case 194: break;
          case 83: 
            { return create(K_THIS);
            }
          case 195: break;
          case 84: 
            { return create(K_CASE);
            }
          case 196: break;
          case 85: 
            { return create(K_ELSE);
            }
          case 197: break;
          case 86: 
            { return create(K_NEXT);
            }
          case 198: break;
          case 87: 
            { return create(K_WHILE);
            }
          case 199: break;
          case 88: 
            { return create(REAL_NUMBER);
            }
          case 200: break;
          case 89: 
            { return create(K_ALIAS);
            }
          case 201: break;
          case 90: 
            { return create(K_BREAK);
            }
          case 202: break;
          case 91: 
            { return create(K_SUPER);
            }
          case 203: break;
          case 92: 
            { return create(K_THROW);
            }
          case 204: break;
          case 93: 
            { return create(K_CATCH);
            }
          case 205: break;
          case 94: 
            { return create(K_CLASS);
            }
          case 206: break;
          case 95: 
            { return create(K_ELSIF);
            }
          case 207: break;
          case 96: 
            { return create(K_FALSE);
            }
          case 208: break;
          case 97: 
            { return create(K_MIXIN);
            }
          case 209: break;
          case 98: 
            { return create(K_UNTIL);
            }
          case 210: break;
          case 99: 
            { return create(K_RETURN);
            }
          case 211: break;
          case 100: 
            { return create(K_STATIC);
            }
          case 212: break;
          case 101: 
            { return create(K_MODULE);
            }
          case 213: break;
          case 102: 
            { return create(K_PUBLIC);
            }
          case 214: break;
          case 103: 
            { return create(K_UNLESS);
            }
          case 215: break;
          case 104: 
            { return create(K_REQUIRE);
            }
          case 216: break;
          case 105: 
            { return create(K_EXTENDS);
            }
          case 217: break;
          case 106: 
            { return create(K_FINALLY);
            }
          case 218: break;
          case 107: 
            { return create(K_PRIVATE);
            }
          case 219: break;
          case 108: 
            { return create(K_FILE);
            }
          case 220: break;
          case 109: 
            { return create(K_ABSTRACT);
            }
          case 221: break;
          case 110: 
            { return create(K_PROTECTED);
            }
          case 222: break;
          case 111: 
            { return create(K_TARGET);
            }
          case 223: break;
          case 112: 
            { return create(K_IMPLEMENTS);
            }
          case 224: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
