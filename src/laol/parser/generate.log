grammar:
Grammar <- Spacing contents ? EOF  ;
 for_variable_name <- IDENT  ;
 variable_name <- IDENT ( COLON2 IDENT ) *  ;
 primary_expression <- K_NIL QMARK ? 
  /  K_NEW 
  /  K_FILE 
  /  K_TARGET 
  /  K_TRUE 
  /  K_FALSE 
  /  K_THIS 
  /  K_SUPER 
  /  here_doc 
  /  variable_name ( QMARK 
  /  EXCL ) ? 
  /  STRING 
  /  SYMBOL 
  /  Number 
  /  hash_primary 
  /  array_primary 
  /  regexp_primary  ;
 regexp_primary <- '/' ! ( '/' 
  /  '*' ) ( '\\' . 
  /  ! '/' . ) + '/' 
  /  "%r{" ( '\\' . 
  /  ! '}' . ) + '}'  ;
 hash_primary <- LCURLY hash_key_value ( COMMA hash_key_value ) * RCURLY  ;
 hash_key <- STRING 
  /  IDENT  ;
 hash_key_value <- hash_key COLON expression  ;
 array_primary <- LBRACK expression ( COMMA expression ) RBRACK 
  /  '%' [wi] '{' ( '\\' . 
  /  ! '}' ) * '}'  ;
 postfix_expression <- postfix_expression LBRACK array_select_expression RBRACK block ? 
  /  postfix_expression LPAREN param_expression_list ? RPAREN block ? 
  /  postfix_expression dot_suffix block ? 
  /  postfix_expression ( PLUS2 
  /  MINUS2 ) 
  /  primary_expression block ?  ;
 dot_suffix <- DOT ( K_NIL QMARK ? 
  /  K_NEW 
  /  method_name ( EXCL 
  /  QMARK ) ? )  ;
 block <- anonymous_function  ;
 unnamed_param <- expression ( COMMA expression ) *  ;
 named_param_ele <- IDENT COLON expression  ;
 named_param <- named_param_ele ( COMMA named_param_ele ) * ( COMMA expression ) *  ;
 param_expression_list <- unnamed_param ? named_param ?  ;
 unary_expression <- ( PLUS2 
  /  MINUS2 
  /  AND 
  /  STAR ) unary_expression unary_op unary_expression 
  /  postfix_expression  ;
 unary_op <- TILDE 
  /  EXCL 
  /  PLUS 
  /  MINUS  ;
 binary_expression <- binary_expression binary_op unary_expression 
  /  unary_expression  ;
 binary_op <- STAR 
  /  DIV 
  /  PCNT 
  /  PLUS 
  /  MINUS 
  /  LT2 
  /  GT2 
  /  LT 
  /  LTEQ 
  /  GT 
  /  GTEQ 
  /  NEQ 
  /  EQ2 
  /  AND 
  /  CARET 
  /  OR 
  /  AND2 
  /  OR2  ;
 expression <- expression QMARK expression COLON expression 
  /  binary_expression  ;
 array_select_expression <- expression ( DOT2 
  /  COLON ) expression 
  /  expression ( COMMA expression ) ?  ;
 assignment_lhs <- lhs_decl ( COMMA lhs_decl ) *  ;
 lhs_decl <- access_modifier ? K_STATIC ? mutability ? lhs_ref  ;
 lhs_ref <- lhs_ref LBRACK array_select_expression RBRACK 
  /  variable_name  ;
 assignment_op <- EQ 
  /  LT2_EQ 
  /  GT2_EQ 
  /  AND_EQ 
  /  OR_EQ 
  /  STAR_EQ 
  /  MINUS_EQ 
  /  PLUS_EQ 
  /  DIV_EQ 
  /  PCNT_EQ  ;
 contents <- require_statement * file_item +  ;
 require_statement <- K_REQUIRE STRING s_tail  ;
 file_item <- module_declaration 
  /  statement  ;
 module_item <- SEMI 
  /  assignment_lhs assignment_op assignment_rhs 
  /  class_declaration statement_modifier ? 
  /  method_declaration statement_modifier ? 
  /  module_declaration statement_modifier ?  ;
 statement <- SEMI 
  /  assignment_lhs assignment_op assignment_rhs 
  /  expression s_tail 
  /  case_statement statement_modifier ? 
  /  if_statement 
  /  while_statement 
  /  until_statement 
  /  for_statement 
  /  LCURLY statement * RCURLY statement_modifier ? 
  /  K_BREAK s_tail 
  /  K_NEXT s_tail 
  /  K_ALIAS method_name method_name s_tail 
  /  return_statement s_tail 
  /  try_statement 
  /  throw_statement s_tail 
  /  class_declaration statement_modifier ? 
  /  method_declaration statement_modifier ? 
  /  mixin_statement s_tail  ;
 try_statement <- K_TRY statement catch_statement * finally_statement ?  ;
 assignment_rhs <- expression ( COMMA expression ) * s_tail 
  /  anonymous_function statement_modifier ?  ;
 return_statement <- K_RETURN expression  ;
 throw_statement <- K_THROW expression  ;
 catch_statement <- K_CATCH expression statement  ;
 finally_statement <- K_FINALLY statement  ;
 statement_modifier <- ( ( K_IF 
  /  K_UNLESS 
  /  K_WHILE 
  /  K_UNTIL ) expression ) + SEMI  ;
 mixin_name <- IDENT ( COLON2 IDENT ) *  ;
 mixin_statement <- K_MIXIN mixin_name ( COMMA mixin_name ) *  ;
 s_tail <- statement_modifier 
  /  SEMI  ;
 module_declaration <- K_MODULE IDENT LCURLY module_item * RCURLY  ;
 class_declaration <- access_modifier ? K_ABSTRACT ? K_CLASS IDENT method_param_decl ? class_extends ? LCURLY class_body RCURLY  ;
 class_body <- base_class_initializer ? statement *  ;
 base_class_initializer <- K_SUPER method_param_decl ? SEMI  ;
 method_param_decl <- LPAREN method_param_decl_list ? RPAREN  ;
 access_modifier <- ( K_PRIVATE 
  /  K_PROTECTED 
  /  K_PUBLIC )  ;
 mutability <- ( K_VAL 
  /  K_VAR )  ;
 method_param_decl_modifier <- access_modifier ? mutability ?  ;
 method_param_decl_ele <- method_param_decl_modifier ( AND 
  /  STAR ) ? IDENT method_param_decl_default ?  ;
 method_param_decl_default <- EQ expression  ;
 method_param_decl_list <- method_param_decl_ele ( COMMA method_param_decl_ele ) *  ;
 class_extends <- ( K_EXTENDS IDENT ) ? ( K_IMPLEMENTS IDENT ( COMMA IDENT ) ) ?  ;
 anonymous_function <- ARROW method_param_decl LCURLY method_body RCURLY  ;
 method_declaration <- access_modifier ? K_ABSTRACT ? K_DEF method_name method_param_decl ? ( LCURLY method_body RCURLY 
  /  SEMI )  ;
 method_name <- METHOD_NAME_IDENT ? method_name_op 
  /  METHOD_NAME_IDENT  ;
 method_name_op <- unary_op 
  /  binary_op 
  /  QMARK 
  /  EXCL 
  /  assignment_op 
  /  PLUS2 
  /  MINUS2 
  /  "++_" 
  /  "--_"  ;
 method_body <- statement *  ;
 case_statement <- K_CASE expression LCURLY ( K_WHEN expression ( COMMA expression ) * COLON statement ) * ( K_ELSE statement ) ? RCURLY  ;
 if_statement <- ( K_IF 
  /  K_UNLESS ) expression statement ( K_ELSIF expression statement ) * ( K_ELSE statement ) ?  ;
 while_statement <- K_WHILE expression statement  ;
 until_statement <- K_UNTIL expression statement  ;
 enumerable_expression <- expression  ;
 for_statement <- K_FOR for_variable_name K_IN enumerable_expression statement  ;
 here_doc.
 COLON <- ':' ! ':' Spacing  ;
 COLON2 <- "::"  ;
 SEMI <- ';' Spacing  ;
 DOT <- '.' ! '.' Spacing  ;
 DOT2 <- ".." Spacing  ;
 COMMA <- ',' Spacing  ;
 LT <- '<' ! ( '<' 
  /  '=' ) Spacing  ;
 LTEQ <- "<=" Spacing  ;
 LT2 <- "<<" ! ( '=' 
  /  [a-zA-Z_] ) Spacing  ;
 LT2_EQ <- "<<=" Spacing  ;
 GT <- '>' ! ( '>' 
  /  '=' ) Spacing  ;
 GTEQ <- ">=" Spacing  ;
 GT2 <- ">>" ! '=' Spacing  ;
 GT2_EQ <- ">>=" Spacing  ;
 EQ <- '=' ! '=' Spacing  ;
 EQ2 <- "==" Spacing  ;
 NEQ <- "!=" Spacing  ;
 EXCL <- '!' ! '=' Spacing  ;
 TILDE <- '~' Spacing  ;
 CARET <- '^' Spacing  ;
 AND <- '&' ! ( '&' 
  /  '=' ) Spacing  ;
 AND2 <- "&&" Spacing  ;
 AND_EQ <- "&=" Spacing  ;
 OR <- '|' ! ( '|' 
  /  '=' ) Spacing  ;
 OR2 <- "||" Spacing  ;
 OR_EQ <- "|=" Spacing  ;
 STAR <- '*' ! '=' Spacing  ;
 STAR_EQ <- "*=" Spacing  ;
 MINUS <- '-' ! ( '-' 
  /  '=' 
  /  '>' ) Spacing  ;
 MINUS2 <- "--" Spacing  ;
 MINUS_EQ <- "-=" Spacing  ;
 ARROW <- "->" Spacing  ;
 PLUS <- '+' ! ( '+' 
  /  '=' ) Spacing  ;
 PLUS2 <- "++" Spacing  ;
 PLUS_EQ <- "+=" Spacing  ;
 QMARK <- '?' Spacing  ;
 DIV <- '/' ! '=' Spacing  ;
 DIV_EQ <- "/=" Spacing  ;
 LCURLY <- '{' Spacing  ;
 RCURLY <- '}' Spacing  ;
 LPAREN <- '(' Spacing  ;
 RPAREN <- ')' Spacing  ;
 LBRACK <- '[' Spacing  ;
 RBRACK <- ']' Spacing  ;
 PCNT <- '%' ! '=' Spacing  ;
 PCNT_EQ <- "%=" Spacing  ;
 K_ABSTRACT <- "abstract" K_tail  ;
 K_ALIAS <- "alias" K_tail  ;
 K_BREAK <- "break" K_tail  ;
 K_CASE <- "case" K_tail  ;
 K_CATCH <- "catch" K_tail  ;
 K_CLASS <- "class" K_tail  ;
 K_DEF <- "def" K_tail  ;
 K_ELSE <- "else" K_tail  ;
 K_ELSIF <- "elsif" K_tail  ;
 K_EXTENDS <- "extends" K_tail  ;
 K_FALSE <- "false" K_tail  ;
 K_FINALLY <- "finally" K_tail  ;
 K_FOR <- "for" K_tail  ;
 K_IF <- "if" K_tail  ;
 K_IMPLEMENTS <- "implements" K_tail  ;
 K_IN <- "in" K_tail  ;
 K_MIXIN <- "mixin" K_tail  ;
 K_MODULE <- "module" K_tail  ;
 K_NEXT <- "next" K_tail  ;
 K_NEW <- "new" K_tail  ;
 K_NIL <- "nil" K_tail  ;
 K_PRIVATE <- "private" K_tail  ;
 K_PROTECTED <- "protected" K_tail  ;
 K_PUBLIC <- "public" K_tail  ;
 K_REQUIRE <- "require" K_tail  ;
 K_RETURN <- "return" K_tail  ;
 K_STATIC <- "static" K_tail  ;
 K_SUPER <- "super" K_tail  ;
 K_THIS <- "this" K_tail  ;
 K_THROW <- "throw" K_tail  ;
 K_TRUE <- "true" K_tail  ;
 K_TRY <- "try" K_tail  ;
 K_UNLESS <- "unless" K_tail  ;
 K_UNTIL <- "until" K_tail  ;
 K_VAL <- "val" K_tail  ;
 K_VAR <- "var" K_tail  ;
 K_WHEN <- "when" K_tail  ;
 K_WHILE <- "while" K_tail  ;
 K_FILE <- "__FILE__" K_tail  ;
 K_TARGET <- "__TARGET__" K_tail  ;
 K_tail <- ! IdentCont Spacing  ;
 IdentCont <- [a-zA-Z_0-9]  ;
 SYMBOL <- COLON IDENT Spacing  ;
 IDENT.
 METHOD_NAME_IDENT <- [a-zA-Z] IdentCont * Spacing  ;
 Number <- ( BasedNumber 
  /  Integer 
  /  Float ) Spacing  ;
 Integer <- Digits ! ( '.' 
  /  [eE] )  ;
 Digits <- [0-9] [0-9_] * ! '\''  ;
 Float <- Digits ( '.' Digits ) ? ( [eE] ( '-' 
  /  '+' ) ? Digits ) ?  ;
 BasedNumber <- ( [0-9] [0-9_] * ) ? ! STRING '\'' ( [bB] [01_] + 
  /  [dD] [0-9_] + 
  /  [hH] [a-fA-F0-9_] + 
  /  [oO] [0-7_] + )  ;
 STRING <- '"' ( '\\' . 
  /  ! '"' . ) * '"' Spacing 
  /  '\'' ( '\\' . 
  /  ! '\'' . ) ? '\'' Spacing  ;
 Spacing <- ( Space 
  /  Comment ) *  ;
 Comment <- SL_COMMENT 
  /  ML_COMMENT  ;
 Space <- ' ' 
  /  '\t' 
  /  EOL  ;
 SL_COMMENT <- "//" ( ! EOL . ) * EOL  ;
 ML_COMMENT <- "/*" ( ! "*/" . ) * "*/"  ;
 

Warn : postfix_expression: rule is direct left-recursive: path 'postfix_expression->postfix_expression'.  (LR-1)
Warn : expression: rule is direct left-recursive: path 'expression->expression'.  (LR-1)
Warn : binary_expression: rule is direct left-recursive: path 'binary_expression->binary_expression'.  (LR-1)
Warn : lhs_ref: rule is direct left-recursive: path 'lhs_ref->lhs_ref'.  (LR-1)
