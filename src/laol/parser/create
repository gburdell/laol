	"abstract" {return create(ABSTRACT_K);}
	"alias" {return create(ALIAS_K);}
	"break" {return create(BREAK_K);}
	"case" {return create(CASE_K);}
	"catch" {return create(CATCH_K);}
	"class" {return create(CLASS_K);}
	"def" {return create(DEF_K);}
	"else" {return create(ELSE_K);}
	"elsif" {return create(ELSIF_K);}
	"extends" {return create(EXTENDS_K);}
	"false" {return create(FALSE_K);}
	"finally" {return create(FINALLY_K);}
	"for" {return create(FOR_K);}
	"if" {return create(IF_K);}
	"implements" {return create(IMPLEMENTS_K);}
	"in" {return create(IN_K);}
	"mixin" {return create(MIXIN_K);}
	"module" {return create(MODULE_K);}
	"next" {return create(NEXT_K);}
	"new" {return create(NEW_K);}
	"nil" {return create(NIL_K);}
	"private" {return create(PRIVATE_K);}
	"protected" {return create(PROTECTED_K);}
	"public" {return create(PUBLIC_K);}
	"require" {return create(REQUIRE_K);}
	"return" {return create(RETURN_K);}
	"static" {return create(STATIC_K);}
	"super" {return create(SUPER_K);}
	"this" {return create(THIS_K);}
	"throw" {return create(THROW_K);}
	"true" {return create(TRUE_K);}
	"try" {return create(TRY_K);}
	"unless" {return create(UNLESS_K);}
	"until" {return create(UNTIL_K);}
	"val" {return create(VAL_K);}
	"var" {return create(VAR_K);}
	"when" {return create(WHEN_K);}
	"while" {return create(WHILE_K);}
	"__FILE__" {return create(FILE_K);}
	"__TARGET__" {return create(TARGET_K);}
	":" {return create(COLON);}
	"::" {return create(COLON2);}
	";" {return create(SEMI);}
	"." {return create(DOT);}
	".." {return create(DOT2);}
	"," {return create(COMMA);}
	"<" {return create(LT);}
	"<=" {return create(LTEQ);}
	"<<" {return create(LT2);}
	"<<=" {return create(LT2_EQ);}
	">" {return create(GT);}
	">=" {return create(GTEQ);}
	">>" {return create(GT2);}
	">>=" {return create(GT2_EQ);}
	"=" {return create(EQ);}
	"==" {return create(EQ2);}
	"!=" {return create(NEQ);}
	"!" {return create(EXCL);}
	"~" {return create(TILDE);}
	"^" {return create(CARET);}
	"&" {return create(AND);}
	"&&" {return create(AND2);}
	"&=" {return create(AND_EQ);}
	"|" {return create(OR);}
	"||" {return create(OR2);}
	"|=" {return create(OR_EQ);}
	"*" {return create(STAR);}
	"*=" {return create(STAR_EQ);}
	"-" {return create(MINUS);}
	"--" {return create(MINUS2);}
	"-=" {return create(MINUS_EQ);}
	"->" {return create(ARROW);}
	"+" {return create(PLUS);}
	"++" {return create(PLUS2);}
	"+=" {return create(PLUS_EQ);}
	"?" {return create(QMARK);}
	"/" {return create(DIV);}
	"/=" {return create(DIV_EQ);}
	"{" {return create(LCURLY);}
	"}" {return create(RCURLY);}
	"(" {return create(LPAREN);}
	")" {return create(RPAREN);}
	"[" {return create(LBRACK);}
	"]" {return create(RBRACK);}
	"%" {return create(PCNT);}
	"%=" {return create(PCNT_EQ);}
	{IDENT} {return create(IDENT);}
	{UNSIGNED_NUMBER} {return create(UNSIGNED_NUMBER);}
	{REAL_NUMBER} {return create(REAL_NUMBER);}
	{BASED_NUMBER} {return create(BASED_NUMBER);}
