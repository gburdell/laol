# PEG grammar for laol
# Ruby: http://ruby-doc.org/docs/ruby-doc-bundle/Manual/man-1.4/syntax.html

Grammar <- nlc contents? EOF

nlc <- (NL / wcomment)*
c   <- wcomment*

// Wrap comment so we can use callback to collect
wcomment <- COMMENT

for_variable_name <- IDENT

variable_name <-
	IDENT (COLON2 IDENT)*

primary_expression <-
	K_NIL QMARK?
/	K_NEW
/	K_FILE / K_TARGET
/	K_TRUE / K_FALSE
/	K_THIS / K_SUPER
//TODO: /	here_doc
/ 	variable_name (QMARK / EXCL)?
/	STRING_LITERAL
/	symbol
/	number
/	hash_primary
/	array_primary
/	regexp_primary

regexp_primary <- REGEXP

hash_primary <- LCURLY (hash_key_value (COMMA hash_key_value)*)? RCURLY

hash_key <- STRING_LITERAL / IDENT

hash_key_value <- hash_key COLON expression

array_primary <-
	LBRACK (expression (COMMA expression)*)? RBRACK
	#array of words or symbols
/	ARRAY_OF

postfix_expression <-
	postfix_expression LBRACK array_select_expression RBRACK block?
/	postfix_expression LPAREN param_expression_list? RPAREN block?
/	postfix_expression dot_suffix block?
/	postfix_expression (PLUS2 / MINUS2) 
/	primary_expression block?

dot_suffix <-
	DOT (	K_NIL QMARK?
		/	K_NEW
		/	method_name_ident (EXCL / QMARK)?
		)

block <- anonymous_function

unnamed_param <- expression (COMMA expression)*

named_param_ele <- IDENT COLON expression

// last: can be vararg
named_param <- named_param_ele (COMMA named_param_ele)* (COMMA expression)*

// Any named params are at the end
param_expression_list <- unnamed_param? named_param?

unary_expression <-
	(PLUS2 / MINUS2 / AND / STAR) unary_expression
/	unary_op unary_expression
/	postfix_expression

unary_op <- TILDE /	EXCL / PLUS / MINUS	

binary_expression <-
	binary_expression binary_op unary_expression
/	unary_expression

binary_op <-
	STAR / DIV / PCNT / PLUS / MINUS / LT2 / GT2
/	LT / LTEQ / GT / GTEQ
/	NEQ / EQ2
/	AND / CARET / OR
/	AND2 / OR2

expression <-
	expression QMARK expression COLON expression
/	LPAREN expression RPAREN
/	binary_expression

array_select_expression <-
	expression (DOT2 / COLON) expression
/	expression (COMMA expression)?

var_decl <- lhs_decl IDENT (COMMA IDENT)*

assignment_lhs <- lhs_decl lhs_ref (COMMA lhs_ref)*

lhs_decl <- access_modifier? K_STATIC? mutability?

lhs_ref <-
	lhs_ref LBRACK array_select_expression RBRACK
/	lhs_ref LPAREN param_expression_list? RPAREN
/	lhs_ref DOT method_name_ident (EXCL / QMARK)?
/	lhs_ref (PLUS2 / MINUS2) 
/	variable_name

assignment_op <-
	EQ
/	LT2_EQ
/	GT2_EQ
/	AND_EQ
/	OR_EQ
/	STAR_EQ
/	MINUS_EQ
/	PLUS_EQ
/	DIV_EQ
/	PCNT_EQ
	
contents <-
	require_statement* file_item+

require_statement <- K_REQUIRE STRING_LITERAL s_tail

file_item <-
	module_declaration
/	statement

module_item <-
	SEMI	
/	var_decl s_tail
/	assignment_lhs assignment_op assignment_rhs
/	class_declaration statement_modifier?
/	method_declaration statement_modifier?
/	module_declaration statement_modifier?

statement <- 
	SEMI	
/	var_decl s_tail
/	assignment_lhs assignment_op assignment_rhs
/	expression s_tail
/	case_statement statement_modifier?
//NOTE: We dont allow statement modifier on an if-stmt.  Seems redundant...
/	if_statement
/	while_statement
/	until_statement
/	for_statement
/	LCURLY statement* RCURLY statement_modifier?
/	K_BREAK s_tail
/	K_NEXT s_tail
/	K_ALIAS method_name method_name s_tail
/	return_statement s_tail
/	try_statement
/	throw_statement s_tail
/	class_declaration statement_modifier?
/	method_declaration statement_modifier?
/	mixin_statement s_tail

try_statement <-
	K_TRY statement
		catch_statement*
		finally_statement?

// NOTE: while ruby allows most statements as rhs; e.g.: "foo = if xxx; 12", 
// we will not.  Use method to do so.
assignment_rhs <-
	expression (COMMA expression)* s_tail	
/	anonymous_function statement_modifier?

return_statement <- K_RETURN expression?

throw_statement <- K_THROW expression

catch_statement <- K_CATCH expression statement

finally_statement <- K_FINALLY statement

statement_modifier <- ((K_IF / K_UNLESS / K_WHILE / K_UNTIL) expression)+ SEMI

mixin_name <-
	IDENT (COLON2 IDENT)*

mixin_statement <- K_MIXIN mixin_name (COMMA mixin_name)*
	
s_tail <-
	statement_modifier
/	SEMI

module_declaration <-
	K_MODULE IDENT LCURLY
		module_item*
	RCURLY

class_declaration <-
	// Scala style
	access_modifier?
	K_ABSTRACT?
	K_CLASS IDENT 
		method_param_decl?
		class_extends?
		LCURLY
			class_body
		RCURLY

//1st statement is initializer
class_body <- base_class_initializer? statement*

base_class_initializer <- K_SUPER method_param_decl?  SEMI

method_param_decl <- LPAREN method_param_decl_list? RPAREN

access_modifier <- (K_PRIVATE / K_PROTECTED / K_PUBLIC)

mutability <- (K_VAL / K_VAR)

method_param_decl_modifier <- access_modifier? mutability?

method_param_decl_ele <-
	//NOTE: only last in list can have STAR (marks as varargs)
	// AND (&) marks as function parameter
	method_param_decl_modifier (AND / STAR)? IDENT method_param_decl_default?

method_param_decl_default <- EQ expression

method_param_decl_list <- method_param_decl_ele (COMMA method_param_decl_ele)*	

class_extends <- (K_EXTENDS IDENT)? (K_IMPLEMENTS IDENT (COMMA IDENT))?

anonymous_function <- ARROW method_param_decl LCURLY method_body RCURLY

method_declaration <-
	access_modifier?
	K_ABSTRACT?
	K_DEF method_name method_param_decl?
		(	LCURLY method_body RCURLY
		/	SEMI //case of abstract
		)
	
method_name <-
	method_name_ident? method_name_op
/	method_name_ident

method_name_op <-
	LBRACK RBRACK EQ  // []=
/	LBRACK RBRACK     // []
/   LPAREN RPAREN	  // ()
/	unary_op
/	binary_op
/	QMARK
/	EXCL
/	assignment_op
/	PLUS2 / MINUS2	//postix operator
/	PREFIX_OP //"++_" / "--_"	//prefix operator

method_body <- statement*
	
case_statement <-
	K_CASE expression LCURLY
		(K_WHEN expression (COMMA expression)* COLON statement)*
		(K_ELSE statement)?
	RCURLY

if_statement <-
	(K_IF / K_UNLESS) expression statement
		(K_ELSIF expression statement)*
		(K_ELSE statement)?

while_statement <- K_WHILE expression statement
until_statement <- K_UNTIL expression statement

enumerable_expression <- expression

for_statement <- K_FOR for_variable_name K_IN enumerable_expression statement
;

// a bit more complicated, so customize
//TODO: here_doc.

symbol <- COLON IDENT ;

// Allow class methods to include keywords too
//TODO: fix to allow keywords too
method_name_ident <- IDENT ;

number <-
	UNSIGNED_NUMBER
/	REAL_NUMBER
/	BASED_NUMBER
;

#
# Tokens from flex:

K_ABSTRACT.
K_ALIAS.
K_BREAK.
K_CASE.
K_CATCH.
K_CLASS.
K_DEF.
K_ELSE.
K_ELSIF.
K_EXTENDS.
K_FALSE.
K_FINALLY.
K_FOR.
K_IF.
K_IMPLEMENTS.
K_IN.
K_MIXIN.
K_MODULE.
K_NEXT.
K_NEW.
K_NIL.
K_PRIVATE.
K_PROTECTED.
K_PUBLIC.
K_REQUIRE.
K_RETURN.
K_STATIC.
K_SUPER.
K_THIS.
K_THROW.
K_TRUE.
K_TRY.
K_UNLESS.
K_UNTIL.
K_VAL.
K_VAR.
K_WHEN.
K_WHILE.
K_FILE.
K_TARGET.
COLON.
COLON2.
SEMI.
DOT.
DOT2.
COMMA.
LT.
LTEQ.
LT2.
LT2_EQ.
GT.
GTEQ.
GT2.
GT2_EQ.
EQ.
EQ2.
NEQ.
EXCL.
TILDE.
CARET.
AND.
AND2.
AND_EQ.
OR.
OR2.
OR_EQ.
STAR.
STAR_EQ.
MINUS.
MINUS2.
MINUS_EQ.
ARROW.
PLUS.
PLUS2.
PLUS_EQ.
QMARK.
DIV.
DIV_EQ.
LCURLY.
RCURLY.
LPAREN.
RPAREN.
LBRACK.
RBRACK.
PCNT.
PCNT_EQ.
IDENT.
UNSIGNED_NUMBER.
REAL_NUMBER.
BASED_NUMBER.
STRING_LITERAL.
REGEXP.
ARRAY_OF.
PREFIX_OP.
NL.
COMMENT.
